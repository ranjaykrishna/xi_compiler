package rak248;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.OutputStreamWriter;

import edu.cornell.cs.cs4120.util.CodeWriterTreePrinter;
import edu.cornell.cs.cs4120.xi.AbstractSyntaxNode;

import rak248.asm.TempTable;
import rak248.asm.Tile;
import rak248.opt.CFG;
import rak248.opt.CFGNode;
import rak248.testing.InputInterpreter;
import rak248.testing.Interpreter;
import rak248.testing.LowIRInterpreter;
import rak248.testing.XiParserFactory;
import rak248.util.*;
import rak248.xi.SyntaxIR;
import rak248.xi.ir.Optimize;
import rak248.xi.ir.SeqIR;
import rak248.xi.parser.CompUnitNode;
import rak248.xi.parser.XiParser;
import rak248.xi.typeChecker.SymbolTableCreator;

public class Driver {

	/**
	 * @param args
	 * @throws Exception 
	 * @throws Exception 
	 */
	public static void main(String[] args){
		try{
		if (args.length == 0){
			printHelp();
		}else{
			boolean opt = true;
			String output = "";
			String tree = "None";//= "--dump_ast";
			String source ="";
			for(int i =0; i < args.length; i++){
				String arg = args[i];
				if(arg.equals("-O")){
					opt = false;
				}else if(arg.equals("-o")){
					if(args.length<i+1){
						System.out.println("Please specify an output file with the -o option");
						printHelp();
						return;
					}else{
						output = args[i+1];
					}
				}else if(arg.equals("--dump_ast") || arg.equals("--dump_ir")){
					tree = arg;
				}else if(arg.equals("-target")) {
					String os = args[++i];
					if(!os.equals("linux")) {
						System.out.println("Sorry " + os + " is not a supported target");
						printHelp();
						return;
					}
				}else{//Must be the input file
					source = arg;
					if(output.isEmpty())
						output = source.substring(0, source.lastIndexOf('.'))+".s";
				}
			}
			helper(opt,tree,source,output);
		}
		}
		catch (Exception e){
			e.printStackTrace();
		}
	}
	
	public static void printHelp(){
		System.out.println("Incorrect inputs.");
		System.out.println("Add -O to remove optimizations.");
		System.out.println("Add --dump_ast to output an abstract syntax tree.");
		System.out.println("Add --dump_ir to output the intermediate representation.");
		System.out.println("Add -o output_file to output assembly to output_file");
		System.out.println("Add -target OS to specify the operating system for which to generate code");
		System.out.println("Make sure to add the source xi file.");
	}
	
	public static void helper(boolean optimize, String tree, String source, String output) throws Exception{
		FileReader file = new FileReader(source);
		BufferedReader bf = new BufferedReader(file);
		XiParser parser_obj = (XiParser) (new XiParserFactory()).newParser(bf);
		AbstractSyntaxNode parseTree = null;
		parseTree = parser_obj.parse();
		CompUnitNode comp = (CompUnitNode) parseTree;
		SymbolTableCreator stc = new SymbolTableCreator();
		if (stc.interfaceCheck(source.substring(0,source.length()-3),comp)){
			if (tree.equals("--dump_ast")){
				CodeWriterTreePrinter printer = new CodeWriterTreePrinter(System.out);
				printer.print(comp);
			}		
			else if (tree.equals("--dump_ir") || tree.equals("None")){
				if (!optimize){
					SyntaxIR seq = comp.translate(null);
					CodeWriterIRPrinter printer = new CodeWriterIRPrinter(System.out);
					printer.print(seq);
				}
				else{
					//optimizations
					SyntaxIR seq = comp.translate(null);
					//seq = seq.foldCALL();
					seq = seq.foldESEQ();
					Optimize.foldConst(seq);
					Optimize.foldSEQ(seq);
					Optimize.staticStackFrame(seq);
					//Optimize.foldCJump(seq);
					if(tree.equals("--dump_ir")) {
						CompactPrinter printer = new CompactPrinter(new OutputStreamWriter(System.out));
						printer.print(seq);
					}
					
					//UnComment the following two lines to run the interpreter
					int[][] s = new int[2][2];
					s[1][1] = 34;
					s[1][0] = 2;
					s[0][0] = 0;
					s[0][1] = 1;
					InputInterpreter lir = new InputInterpreter(seq);
					//lir.runProgram(s);
					TempTable tTable = new TempTable();
					FileWriter f = new FileWriter(output);
					BufferedWriter b = new BufferedWriter(f);
					for(Tile tile : seq.generateTile(tTable)) {
						b.write(tile.toString());
						b.newLine();
						//System.out.println(tile);
					}
					b.close();
					CFG cfg = new CFG(seq.getChildren());
					CFGNode root = cfg.getHead();
					CFG.printDot(root, "cfg.dot");
					
					//There are a lot of print statements 
				}
			}else{
				System.out.println("You dun goofed");
				printHelp();
			}
		}
	}
}
