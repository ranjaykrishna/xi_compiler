package rak248.xi.ir;

import java.util.ArrayList;

import rak248.asm.AddressingMode;
import rak248.asm.TempTable;
import rak248.asm.Tile;
import rak248.util.VisualizableIRNode;
import rak248.xi.SyntaxIR;
import rak248.xi.ir.OpIR.opEnum;

public class OpIR extends ExpressionIR {
	
	public static enum opEnum {DIVIDE, MINUS, NOT_EQUAL, NOT, UNARY_MINUS, LT, OR, GEQ,  // NOT SURE IF WE NEED UNARY_MINUS OR NOT
		PLUS, EQUAL, TIMES, LEQ, GT, AND, LSHIFT, RSHIFT, MODULO};
	
	private opEnum op;
	
	public OpIR(opEnum op, SyntaxIR ir) {
		this.op = op;
		addChild(ir);
		setLabel(opToString());
	}

	public OpIR(opEnum i, ExpressionIR e1, SyntaxIR e2) {
		op = i;
		addChild(e1);
		addChild(e2);
		setLabel(opToString());
	}

	public void setOp(opEnum op) {
		this.op = op;
		setLabel(opToString());
	}

	public opEnum getOp() {
		return op;
	}
	
	public String opToString(){
		switch(op){
		case UNARY_MINUS:
			return "UNARY_MINUS";
		case NOT:
			return "NOT";
		case NOT_EQUAL:
			return "NOT_EQUAL";
		case LT:
			return "LT";
		case OR:
			return "OR";
		case GEQ:
			return "GEQ";
		case EQUAL:
			return "EQUAL";
		case LEQ:
			return "LEQ";
		case GT:
			return "GT";
		case AND:
			return "AND";
		case DIVIDE:
			return "DIVIDE";
		case MINUS:
			return "MINUS";
		case PLUS:
			return "PLUS";
		case TIMES:
			return "TIMES";
		case LSHIFT:
			return "LSHIFT";
		case RSHIFT:	
			return "RSHIFT";
		default:
			return "DEADBEEF";	
		}
	}
	
	public boolean returnsBool(){
		switch(op){
		case NOT_EQUAL:
		case NOT:
		case LT:
		case OR:
		case GEQ:
		case EQUAL:
		case LEQ:
		case GT:
		case AND:
			return true;
		default:
			return false;
		}
	}
	
	public boolean returnsInt(){
		switch(op){
		case DIVIDE:
		case MINUS:
		case UNARY_MINUS:
		case PLUS:
		case TIMES:
		case LSHIFT:
		case RSHIFT:
			return true;
		default:
			return false;
		}
	}
	
	public SyntaxIR foldESEQ() {
		SyntaxIR child1 = ((SyntaxIR) getChildren().get(0)).foldESEQ();
		SyntaxIR child2 = null;
		EseqIR ret = new EseqIR();
		getChildren().set(0, child1);
		if(getChildren().size() > 1) {
			child2 = ((SyntaxIR) getChildren().get(1)).foldESEQ();
			getChildren().set(1, child2);
		}
		if(!(child1 instanceof EseqIR) && child2 == null) {
			return this;
		} else if(child1 instanceof EseqIR && child2 == null) {
			ret.addChild(((EseqIR) child1).getS());
			ret.addChild(new OpIR(op, ((EseqIR) child1).getE()));
		} else if(!(child1 instanceof EseqIR) && !(child2 instanceof EseqIR)) {
			return this;
		} else if(child1 instanceof EseqIR && !(child2 instanceof EseqIR)) {
			ret.addChild(((EseqIR) child1).getS());
			ret.addChild(new OpIR(op, ((EseqIR) child1).getE(), child2));
		} else if(!(child1 instanceof EseqIR) && child2 instanceof EseqIR) {
			TempIR temp = new TempIR("OP_temp" + SyntaxIR.getFreshLabel());
			MoveIR move = new MoveIR(temp, (ExpressionIR) child1);
			OpIR opir = new OpIR(op, temp, ((EseqIR) child2).getE());
			ret.addChild(move);
			ret.addChild(((EseqIR) child2).getS());
			ret.addChild(opir);
			if(child1 instanceof TempIR) {
				ret.addChild(new MoveIR((TempIR) child1, temp));
			}
		} else {
			ret.addChild(((EseqIR) child1).getS());
			TempIR temp = new TempIR("OP_temp" + getFreshLabel());
			MoveIR move1 = new MoveIR(temp, ((EseqIR) child1).getE());
			ret.addChild(move1);
			ret.addChild(((EseqIR) child2).getS());
			OpIR opir = new OpIR(op, temp, ((EseqIR) child2).getE());
			ret.addChild(opir);
			if(child1 instanceof TempIR) {
				ret.addChild(new MoveIR((TempIR) child1, temp));
			}
		}
		return ret;
	}
	
	public SyntaxIR foldCALL(){
		int i = 0;
		ArrayList<VisualizableIRNode> ch = new ArrayList<VisualizableIRNode>();
		for (VisualizableIRNode node: getChildren()){
			//System.out.println(node.getClass());
			if (node instanceof CallIR){
				EseqIR eseq = new EseqIR();
				SyntaxIR inside = ((CallIR) node).foldCALL();
				TempIR temp = new TempIR("_call"+getFreshLabel());
				MoveIR move = new MoveIR(temp,inside);
				eseq.addChild(move);
				eseq.addChild(temp);
				ch.add(i, eseq);
				
			}
			else{
				SyntaxIR syn = ((SyntaxIR) node).foldCALL();
				ch.add(i, syn);
			}
			i++;
		}
		setChildren(ch);
		return this;
	}
	
	/*
	 * pop r13
	 * pop r12
	 * op r13, r12
	 * push r12
	 * 
	 * if bool:
	 * pop r13
	 * pop r12
	 * cmp r13, r12
	 * jcc l0
	 * l1:
	 * mov 0 r12
	 * jmp end
	 * l0
	 * mov 1 r12
	 * end:
	 * push r12
	 */
	public ArrayList<Tile> generateTile(TempTable tTable) {
		ArrayList<Tile> result = new ArrayList<Tile>();
		SyntaxIR left = (SyntaxIR) getChildren().get(0);
		result.addAll(left.generateTile(tTable));
		//System.out.println("op children size: " + getChildren().size());
		//System.out.println(left);
		//System.out.println(op);
		if(getChildren().size() > 1) {
			AddressingMode r13 = new AddressingMode("r13");
			AddressingMode r12 = new AddressingMode("r12");
			SyntaxIR right = (SyntaxIR) getChildren().get(1);
			result.addAll(right.generateTile(tTable));
			Tile t1 = new Tile(1, "popq", new AddressingMode("r13"), null);
			Tile t2 = new Tile(1, "popq", new AddressingMode("r12"), null);
			Tile t3 = new Tile(1, null, null, null);
			Tile t4 = new Tile(1, "pushq", new AddressingMode("r12"), null);
			switch(op) {
			case NOT_EQUAL:
				t3.setOpCode("jnz");
				break;
			case LT:
				t3.setOpCode("js");
				break;
			case OR:
				t3.setOpCode("or");
				t3.setDestAddrMode(r12);
				t3.setSrcAddrMode(r13);
				result.add(t1);
				result.add(t2);
				result.add(t3);
				result.add(t4);
				return result;
			case GEQ:
				t3.setOpCode("jge");
				break;
			case EQUAL:
				t3.setOpCode("je");
				break;
			case LEQ:
				t3.setOpCode("jle");
				break;
			case GT:
				t3.setOpCode("jg");
				break;
			case AND:
				t3.setOpCode("and");
				t3.setDestAddrMode(r12);
				t3.setSrcAddrMode(r13);
				result.add(t1);
				result.add(t2);
				result.add(t3);
				result.add(t4);
				return result;
			case DIVIDE:
				t3.setOpCode("idiv");
				//idiv divides RDX:RAX by the operand so we need to move r12 into rax and 0 into rdx
				//and give it the operand r13
				result.add(t1);
				result.add(t2);
				result.add(new Tile(1, "movq",r12,new AddressingMode("rax")));
				//we need to sign extend r12 into rdx
				result.add(new Tile(1, "cmp", new AddressingMode(0),r12));
				//if r12 is less than 0 we move FFFFFFFFFFFFFFFF to rdx otherwise move zero
				int div = tTable.getNewJumpLabel();
				result.add(new Tile(1, "jl", new AddressingMode("div"+div,true),null));				
				//fall through to moving zero
				result.add(new Tile(1, "movq",new AddressingMode(0),new AddressingMode("rdx")));
				result.add(new Tile(1, "jmp", new AddressingMode("divEnd"+div, true), null));
				result.add(new Tile(1, "div"+div+":",null,null));
				result.add(new Tile(1, "movq",new AddressingMode(-1),new AddressingMode("rdx")));
				result.add(new Tile(1, "divEnd"+div+":",null,null));
				t3.setSrcAddrMode(r13);
				t3.setDestAddrMode(null);
				result.add(t3);
				//The result is put in RAX so we need to push that on the stack
				result.add(new Tile(1, "pushq", new AddressingMode("rax"),null));
				return result;
			case MINUS:
				t3.setOpCode("subq");
				break;
			case PLUS:
				t3.setOpCode("add");
				break;
			case TIMES:
				t3.setOpCode("imul");
				break;
			case LSHIFT:
				t3.setOpCode("shl");
				t3.setSrcAddrMode(new AddressingMode(3));
				t3.setDestAddrMode(new AddressingMode("r12"));
				result.add(t1);
				result.add(t2);
				result.add(t3);
				//Tile t5 = new Tile(1, "movq", new AddressingMode("r13"), new AddressingMode("r12"));
				//result.add(t5);
				result.add(t4);
				return result;
			case RSHIFT:	
				t3.setOpCode("shr");
				break;
			default:
				System.out.println("op is: " + op);
				t3.setOpCode("BROKE!");	
			}
			if(this.returnsBool()) {
				Tile cmpTile = new Tile(1, "cmp", r13, r12);
				result.add(t1);
				result.add(t2);
				result.add(cmpTile);
				int lblID = tTable.getNewJumpLabel();
				Tile jmpTile = new Tile(1, t3.getOpcode(), null, null);
				jmpTile.setSrcAddrMode(new AddressingMode("_op" + lblID, true));
				result.add(jmpTile);
				result.add(new Tile(1, "movq", new AddressingMode(0), r12));
				result.add(new Tile(1, "jmp", new AddressingMode("_end" + lblID, true), null));
				result.add(new Tile(1, "_op" + lblID + ": ", null, null));
				result.add(new Tile(1, "movq", new AddressingMode(1), r12));
				result.add(new Tile(1, "_end" + lblID + ": ", null, null));
				result.add(t4);
				return result;
			} else {
				t3.setSrcAddrMode(new AddressingMode("r13"));
				t3.setDestAddrMode(new AddressingMode("r12"));
				result.add(t1);
				result.add(t2);
				result.add(t3);
				result.add(t4);
				return result;
			}
		// it's a '!a' or a '-a'
		} else {
			Tile t1 = new Tile();
			Tile t3 = new Tile();
			Tile t4 = new Tile();
			t1.setScore(1);
			t3.setScore(1);
			t4.setScore(1);
			t1.setOpCode("popq");
			t4.setOpCode("pushq");
			t1.setSrcAddrMode(new AddressingMode("r12"));
			t4.setSrcAddrMode(new AddressingMode("r12"));
			switch(op) {
			case UNARY_MINUS:
				t3.setOpCode("neg");
				break;
			case NOT:
				t3.setOpCode("btc");
				t3.setSrcAddrMode(new AddressingMode(0));
				t3.setDestAddrMode(new AddressingMode("r12"));
				result.add(t1);
				result.add(t3);
				result.add(t4);
				//System.out.println(result);
				return result;
			}
			//System.out.println("shouldnt get here");
			t3.setSrcAddrMode(new AddressingMode("r12"));
			result.add(t1);
			result.add(t3);
			result.add(t4);
			return result;
		}
		
	}
}