
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 05 19:48:56 EST 2011
//----------------------------------------------------

package rak248.xi.parser;

import java_cup.runtime.*;
import rak248.xi.lexer.*;
import rak248.xi.SyntaxNode;
import rak248.xi.typeChecker.Type;
import java.util.ArrayList;
import java.util.LinkedHashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 05 19:48:56 EST 2011
  */
public class InterfaceParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public InterfaceParser() {super();}

  /** Constructor which sets the default scanner. */
  public InterfaceParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public InterfaceParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\017\010\000\002\020\004\000" +
    "\002\020\002\000\002\021\005\000\002\021\003\000\002" +
    "\022\004\000\002\022\004\000\002\022\003\000\002\022" +
    "\003\000\002\023\005\000\002\004\005\000\002\004\002" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\007\004\000\002\015\005\000\002\010\005\000\002" +
    "\010\007\000\002\010\002\000\002\011\004\000\002\011" +
    "\005\000\002\013\003\000\002\013\004\000\002\014\004" +
    "\000\002\014\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\010\046\uffef\053\uffef\054\uffef\001\002\000" +
    "\004\002\075\001\002\000\010\046\016\053\011\054\014" +
    "\001\002\000\004\002\000\001\002\000\012\002\uffee\007" +
    "\uffee\053\uffee\054\uffee\001\002\000\010\002\uffff\053\011" +
    "\054\014\001\002\000\004\036\032\001\002\000\012\002" +
    "\uffed\007\uffed\053\uffed\054\uffed\001\002\000\010\002\ufffb" +
    "\053\ufffb\054\ufffb\001\002\000\004\053\020\001\002\000" +
    "\010\002\ufffc\053\ufffc\054\ufffc\001\002\000\004\053\017" +
    "\001\002\000\010\046\ufff0\053\ufff0\054\ufff0\001\002\000" +
    "\006\034\ufff8\055\021\001\002\000\004\053\072\001\002" +
    "\000\004\034\023\001\002\000\004\053\026\001\002\000" +
    "\006\012\066\013\065\001\002\000\006\007\062\053\026" +
    "\001\002\000\010\012\ufff6\013\ufff6\036\032\001\002\000" +
    "\006\007\ufff2\053\ufff2\001\002\000\006\007\ufff3\053\ufff3" +
    "\001\002\000\014\002\uffeb\007\uffeb\012\056\053\uffeb\054" +
    "\uffeb\001\002\000\010\011\uffe7\013\uffe7\053\034\001\002" +
    "\000\006\011\051\013\050\001\002\000\004\012\035\001" +
    "\002\000\010\005\040\024\042\053\037\001\002\000\006" +
    "\011\uffe9\013\uffe9\001\002\000\020\002\uffde\007\uffde\011" +
    "\uffde\013\uffde\035\uffde\053\uffde\054\uffde\001\002\000\020" +
    "\002\uffdf\007\uffdf\011\uffdf\013\uffdf\035\uffdf\053\uffdf\054" +
    "\uffdf\001\002\000\020\002\uffe4\007\uffe4\011\uffe4\013\uffe4" +
    "\035\044\053\uffe4\054\uffe4\001\002\000\020\002\uffe0\007" +
    "\uffe0\011\uffe0\013\uffe0\035\uffe0\053\uffe0\054\uffe0\001\002" +
    "\000\020\002\uffe3\007\uffe3\011\uffe3\013\uffe3\035\046\053" +
    "\uffe3\054\uffe3\001\002\000\004\010\045\001\002\000\020" +
    "\002\uffe2\007\uffe2\011\uffe2\013\uffe2\035\uffe2\053\uffe2\054" +
    "\uffe2\001\002\000\004\010\047\001\002\000\020\002\uffe1" +
    "\007\uffe1\011\uffe1\013\uffe1\035\uffe1\053\uffe1\054\uffe1\001" +
    "\002\000\004\053\052\001\002\000\014\002\uffea\007\uffea" +
    "\012\uffea\053\uffea\054\uffea\001\002\000\004\012\053\001" +
    "\002\000\010\005\040\024\042\053\037\001\002\000\006" +
    "\011\uffe8\013\uffe8\001\002\000\014\002\uffec\007\uffec\013" +
    "\060\053\uffec\054\uffec\001\002\000\010\005\040\024\042" +
    "\053\037\001\002\000\014\002\uffe6\007\uffe6\013\uffe6\053" +
    "\uffe6\054\uffe6\001\002\000\010\005\040\024\042\053\037" +
    "\001\002\000\014\002\uffe5\007\uffe5\013\uffe5\053\uffe5\054" +
    "\uffe5\001\002\000\010\002\ufffa\053\ufffa\054\ufffa\001\002" +
    "\000\006\007\ufff5\053\ufff5\001\002\000\006\007\ufff4\053" +
    "\ufff4\001\002\000\004\053\070\001\002\000\010\005\040" +
    "\024\042\053\037\001\002\000\006\007\ufff1\053\ufff1\001" +
    "\002\000\010\012\ufff7\013\ufff7\034\ufff7\001\002\000\006" +
    "\013\065\034\ufff9\001\002\000\006\013\ufff6\034\ufff6\001" +
    "\002\000\010\002\ufffd\053\ufffd\054\ufffd\001\002\000\010" +
    "\002\ufffe\053\ufffe\054\ufffe\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\014\005\014\006\006\007\011\016\007" +
    "\017\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\073\006\006\007\011\017\072\001\001\000\004" +
    "\015\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\021\001\001\000\004\021\070\001" +
    "\001\000\002\001\001\000\016\005\026\006\006\007\011" +
    "\021\023\022\024\023\027\001\001\000\002\001\001\000" +
    "\014\005\062\006\006\007\011\021\023\023\063\001\001" +
    "\000\004\015\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\054\001\001\000\004\010\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\040\013" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\040\013\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\040\013" +
    "\056\001\001\000\002\001\001\000\006\012\040\013\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\040" +
    "\013\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$InterfaceParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$InterfaceParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$InterfaceParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return ((JFlexLexer)getScanner()).next(); 
    }

 
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$InterfaceParser$actions {
  private final InterfaceParser parser;

  /** Constructor */
  CUP$InterfaceParser$actions(InterfaceParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$InterfaceParser$do_action(
    int                        CUP$InterfaceParser$act_num,
    java_cup.runtime.lr_parser CUP$InterfaceParser$parser,
    java.util.Stack            CUP$InterfaceParser$stack,
    int                        CUP$InterfaceParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$InterfaceParser$result;

      /* select the action based on the action number */
      switch (CUP$InterfaceParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primitive_type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new Type(Type.typeEnum.ABSTRACT,id.value()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("primitive_type",8, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // primitive_type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type(Type.typeEnum.BOOL); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("primitive_type",8, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // primitive_type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type(Type.typeEnum.INT); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("primitive_type",8, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_brackets ::= parameter_brackets OPEN_BRACKET CLOSE_BRACKET 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).value;
		 RESULT = b + 1; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("parameter_brackets",10, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("parameter_brackets",10, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter_type ::= primitive_type parameter_brackets 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 switch (t.type) { 
						case INT: RESULT = new Type(Type.typeEnum.INT_ARRAY,b); break;
						case BOOL: RESULT = new Type(Type.typeEnum.BOOL_ARRAY,b); break;
                        case ABSTRACT: RESULT = new Type(Type.typeEnum.ABSTRACT_ARRAY,b,t.getObject()); break;						
					   } 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("parameter_type",9, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter_type ::= primitive_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = t; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("parameter_type",9, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // return_type ::= return_type COMMA parameter_type 
            {
              ArrayList<Type> RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).right;
		ArrayList<Type> rt = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 rt.add(t); RESULT = rt; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("return_type",7, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // return_type ::= COLON parameter_type 
            {
              ArrayList<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 ArrayList<Type> ar = new ArrayList<Type>(); ar.add(t); RESULT = ar; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("return_type",7, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameters ::= 
            {
              LinkedHashMap<String,Type> RESULT =null;
		 RESULT = new LinkedHashMap<String,Type>(); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("parameters",6, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameters ::= parameters COMMA IDENTIFIER COLON parameter_type 
            {
              LinkedHashMap<String,Type> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4)).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 p.put(id.value(),t); RESULT = p; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("parameters",6, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= IDENTIFIER COLON parameter_type 
            {
              LinkedHashMap<String,Type> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 LinkedHashMap<String,Type> mappi = new LinkedHashMap<String,Type>(); mappi.put(id.value(),t); RESULT = mappi; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("parameters",6, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameters_paren ::= OPEN_PAREN parameters CLOSE_PAREN 
            {
              LinkedHashMap<String,Type> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		 RESULT = p; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("parameters_paren",11, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure ::= IDENTIFIER parameters_paren 
            {
              FunctionDecNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new FunctionDecNode(id.value(),p,new ArrayList<Type>(),new StatementsNode(),null,id.position(),id.position()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("procedure",5, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function ::= IDENTIFIER parameters_paren return_type 
            {
              FunctionDecNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		ArrayList<Type> r = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new FunctionDecNode(id.value(),p,r,new StatementsNode(),null,id.position(),id.position()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("function",4, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // functions ::= procedure 
            {
              FunctionsNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		FunctionDecNode f = (FunctionDecNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new FunctionsNode(f,f.position(),f.position()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("functions",3, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // functions ::= function 
            {
              FunctionsNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		FunctionDecNode f = (FunctionDecNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new FunctionsNode(f,f.position(),f.position()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("functions",3, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // use_opt ::= 
            {
              UseNode RESULT =null;
		 RESULT = new UseNode(); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("use_opt",2, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // use_opt ::= use_opt USE IDENTIFIER 
            {
              UseNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).right;
		UseNode u = (UseNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).value;
		int useTleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int useTright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		XiSymbol useT = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = u.addUse(id.value(),u.position(),useT.position(),id.position()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("use_opt",2, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // field ::= identifiers COLON parameter_type 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).right;
		ArrayList<String> id = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new DeclarationNode(id,t,c.position()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("field",17, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_body ::= functions 
            {
              ClassBodyNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		FunctionsNode f = (FunctionsNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 ClassBodyNode cb = new ClassBodyNode(); cb.add(f); RESULT = cb; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("class_body",16, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_body ::= field 
            {
              ClassBodyNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		StatementNode f = (StatementNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 ClassBodyNode cb = new ClassBodyNode(); cb.add(f); RESULT = cb; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("class_body",16, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // class_body ::= class_body field 
            {
              ClassBodyNode RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		ClassBodyNode cb = (ClassBodyNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		StatementNode f = (StatementNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 cb.add(f); RESULT = cb; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("class_body",16, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // class_body ::= class_body functions 
            {
              ClassBodyNode RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		ClassBodyNode cb = (ClassBodyNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		FunctionsNode f = (FunctionsNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 cb.add(f); RESULT = cb; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("class_body",16, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifiers ::= IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 ArrayList<String> i = new ArrayList<String>(); i.add(id.value()); RESULT = i; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("identifiers",15, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identifiers ::= identifiers COMMA IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).right;
		ArrayList<String> i = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 i.add(id.value()); RESULT = i; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("identifiers",15, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-2)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // extends_opt ::= 
            {
              ExtendsNode RESULT =null;
		 RESULT = new ExtendsNode(); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("extends_opt",14, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // extends_opt ::= EXTENDS identifiers 
            {
              ExtendsNode RESULT =null;
		int extleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		XiSymbol ext = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		ArrayList<String> d = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new ExtendsNode(d,ext.position()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("extends_opt",14, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class ::= CLASS IDENTIFIER extends_opt OPEN_BRACE class_body CLOSE_BRACE 
            {
              ClassNode RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-5)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-5)).right;
		XiSymbol cl = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4)).right;
		XiSymbol name = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-4)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3)).right;
		ExtendsNode ext = (ExtendsNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		ClassBodyNode b = (ClassBodyNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new ClassNode(name.value(), ext,b, cl.position(), c.position()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("class",13, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-5)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= class 
            {
              BodyNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		ClassNode c = (ClassNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new BodyNode(c); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= functions 
            {
              BodyNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		FunctionsNode f = (FunctionsNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new BodyNode(f); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= body class 
            {
              BodyNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		BodyNode cf = (BodyNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		ClassNode c = (ClassNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 cf.add(c); RESULT = cf; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= body functions 
            {
              BodyNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		BodyNode cf = (BodyNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		FunctionsNode f = (FunctionsNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 cf.add(f); RESULT = cf; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compilation_unit ::= use_opt body 
            {
              CompUnitNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		UseNode u = (UseNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		BodyNode fs = (BodyNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = new CompUnitNode(u,fs,u.position(),fs.position()); 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= compilation_unit 
            {
              CompUnitNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()).right;
		CompUnitNode c = (CompUnitNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.peek()).value;
		 RESULT = c; 
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          return CUP$InterfaceParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).right;
		CompUnitNode start_val = (CompUnitNode)((java_cup.runtime.Symbol) CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)).value;
		RESULT = start_val;
              CUP$InterfaceParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.elementAt(CUP$InterfaceParser$top-1)), ((java_cup.runtime.Symbol)CUP$InterfaceParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$InterfaceParser$parser.done_parsing();
          return CUP$InterfaceParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

