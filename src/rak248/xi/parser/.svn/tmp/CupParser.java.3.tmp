
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
<<<<<<< .mine
// Sun Dec 04 21:56:01 EST 2011
=======
// Mon Dec 05 18:03:35 EST 2011
>>>>>>> .r1046
//----------------------------------------------------

package rak248.xi.parser;

import java_cup.runtime.*;
import rak248.xi.lexer.*;
import rak248.xi.SyntaxNode;
import rak248.xi.typeChecker.Type;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.LinkedHashMap;

/** CUP v0.11a beta 20060608 generated parser.
<<<<<<< .mine
  * @version Sun Dec 04 21:56:01 EST 2011
=======
  * @version Mon Dec 05 18:03:35 EST 2011
>>>>>>> .r1046
  */
public class CupParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CupParser() {super();}

  /** Constructor which sets the default scanner. */
  public CupParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\246\000\002\002\004\000\002\011\003\000\002\012" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\003\010\000\002\005\004\000\002\005\002\000\002" +
    "\007\005\000\002\007\003\000\002\004\004\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\006\005" +
    "\000\002\013\006\000\002\013\002\000\002\014\003\000" +
    "\002\014\003\000\002\015\011\000\002\015\010\000\002" +
    "\016\007\000\002\016\010\000\002\056\005\000\002\017" +
    "\005\000\002\017\007\000\002\017\002\000\002\020\004" +
    "\000\002\020\005\000\002\063\003\000\002\063\004\000" +
    "\002\064\004\000\002\064\005\000\002\021\003\000\002" +
    "\021\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\004\000\002\024\004\000\002\024\003" +
    "\000\002\024\003\000\002\026\004\000\002\026\005\000" +
    "\002\025\006\000\002\025\005\000\002\027\004\000\002" +
    "\027\002\000\002\030\004\000\002\030\004\000\002\030" +
    "\004\000\002\030\003\000\002\030\003\000\002\030\005" +
    "\000\002\030\007\000\002\031\005\000\002\032\005\000" +
    "\002\033\004\000\002\035\004\000\002\034\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\007\000\002\034" +
    "\005\000\002\034\005\000\002\034\003\000\002\034\005" +
    "\000\002\036\003\000\002\036\003\000\002\055\005\000" +
    "\002\054\007\000\002\037\007\000\002\037\006\000\002" +
    "\037\005\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\003\000\002\037\003" +
    "\000\002\053\007\000\002\053\006\000\002\053\005\000" +
    "\002\053\004\000\002\053\004\000\002\053\004\000\002" +
    "\053\004\000\002\053\003\000\002\053\003\000\002\040" +
    "\005\000\002\041\007\000\002\041\006\000\002\041\005" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\003\000\002\041\003\000\002\041\004\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\003\000\002\043\003\000\002\045\003" +
    "\000\002\045\005\000\002\045\002\000\002\044\006\000" +
    "\002\060\003\000\002\060\004\000\002\061\003\000\002" +
    "\061\004\000\002\062\003\000\002\062\003\000\002\070" +
    "\003\000\002\070\002\000\002\046\004\000\002\046\003" +
    "\000\002\046\003\000\002\046\006\000\002\066\005\000" +
    "\002\066\005\000\002\066\005\000\002\066\005\000\002" +
    "\066\005\000\002\066\005\000\002\066\005\000\002\066" +
    "\005\000\002\066\005\000\002\066\005\000\002\066\005" +
    "\000\002\066\005\000\002\066\005\000\002\057\005\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\006\000\002\050\004\000\002\050\003" +
    "\000\002\050\003\000\002\050\007\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\065\006\000\002\047" +
    "\003\000\002\047\002\000\002\051\004\000\002\051\004" +
    "\000\002\052\006\000\002\052\005\000\002\067\003\000" +
    "\002\067\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\010\046\uffed\053\uffed\054\uffed\001\002\000" +
    "\004\002\u0121\001\002\000\010\046\014\053\017\054\020" +
    "\001\002\000\004\002\000\001\002\000\012\002\uffeb\007" +
    "\uffeb\053\uffeb\054\uffeb\001\002\000\010\002\ufff9\053\ufff9" +
    "\054\ufff9\001\002\000\010\002\ufffa\053\ufffa\054\ufffa\001" +
    "\002\000\012\002\uffec\007\uffec\053\uffec\054\uffec\001\002" +
    "\000\010\002\uffff\053\017\054\020\001\002\000\004\053" +
    "\u011c\001\002\000\006\012\u011a\013\035\001\002\000\010" +
    "\002\ufffb\053\ufffb\054\ufffb\001\002\000\010\012\ufff4\013" +
    "\ufff4\036\040\001\002\000\004\053\021\001\002\000\006" +
    "\034\ufff6\055\022\001\002\000\004\053\034\001\002\000" +
    "\004\034\024\001\002\000\004\053\017\001\002\000\006" +
    "\007\030\053\017\001\002\000\006\007\ufff1\053\ufff1\001" +
    "\002\000\006\007\ufff0\053\ufff0\001\002\000\010\002\ufff8" +
    "\053\ufff8\054\ufff8\001\002\000\006\007\ufff2\053\ufff2\001" +
    "\002\000\006\007\ufff3\053\ufff3\001\002\000\006\013\035" +
    "\034\ufff7\001\002\000\006\013\ufff4\034\ufff4\001\002\000" +
    "\004\053\036\001\002\000\010\012\ufff5\013\ufff5\034\ufff5" +
    "\001\002\000\006\012\063\034\065\001\002\000\010\011" +
    "\uffe3\013\uffe3\053\041\001\002\000\004\012\061\001\002" +
    "\000\006\011\044\013\043\001\002\000\004\053\045\001" +
    "\002\000\006\012\uffe6\034\uffe6\001\002\000\004\012\046" +
    "\001\002\000\010\005\051\024\053\053\050\001\002\000" +
    "\006\011\uffe4\013\uffe4\001\002\000\042\002\uffd8\006\uffd8" +
    "\007\uffd8\011\uffd8\013\uffd8\015\uffd8\021\uffd8\023\uffd8\034" +
    "\uffd8\035\uffd8\041\uffd8\042\uffd8\045\uffd8\047\uffd8\053\uffd8" +
    "\054\uffd8\001\002\000\042\002\uffd9\006\uffd9\007\uffd9\011" +
    "\uffd9\013\uffd9\015\uffd9\021\uffd9\023\uffd9\034\uffd9\035\uffd9" +
    "\041\uffd9\042\uffd9\045\uffd9\047\uffd9\053\uffd9\054\uffd9\001" +
    "\002\000\012\011\uffe0\013\uffe0\034\uffe0\035\055\001\002" +
    "\000\042\002\uffda\006\uffda\007\uffda\011\uffda\013\uffda\015" +
    "\uffda\021\uffda\023\uffda\034\uffda\035\uffda\041\uffda\042\uffda" +
    "\045\uffda\047\uffda\053\uffda\054\uffda\001\002\000\012\011" +
    "\uffdf\013\uffdf\034\uffdf\035\057\001\002\000\004\010\056" +
    "\001\002\000\012\011\uffde\013\uffde\034\uffde\035\uffde\001" +
    "\002\000\004\010\060\001\002\000\012\011\uffdd\013\uffdd" +
    "\034\uffdd\035\uffdd\001\002\000\010\005\051\024\053\053" +
    "\050\001\002\000\006\011\uffe5\013\uffe5\001\002\000\010" +
    "\005\051\024\053\053\050\001\002\000\006\013\u0112\034" +
    "\u0113\001\002\000\020\007\uffce\023\uffce\034\uffce\041\uffce" +
    "\045\uffce\047\uffce\053\uffce\001\002\000\020\007\111\023" +
    "\100\034\071\041\075\045\070\047\073\053\076\001\002" +
    "\000\032\017\146\025\145\030\147\032\132\036\131\044" +
    "\135\050\151\051\144\052\140\053\133\056\152\057\137" +
    "\001\002\000\006\013\uffc1\021\uffc1\001\002\000\020\007" +
    "\uffce\023\uffce\034\uffce\041\u010c\045\uffce\047\uffce\053\uffce" +
    "\001\002\000\022\006\uffcf\007\uffcf\023\uffcf\034\uffcf\041" +
    "\uffcf\045\uffcf\047\uffcf\053\uffcf\001\002\000\004\036\302" +
    "\001\002\000\022\006\uffc9\007\uffc9\023\uffc9\034\uffc9\041" +
    "\uffc9\045\uffc9\047\uffc9\053\uffc9\001\002\000\040\007\uff92" +
    "\013\uff92\017\146\025\145\030\147\032\132\036\131\042" +
    "\uff92\044\135\050\151\051\144\052\140\053\133\056\152" +
    "\057\137\001\002\000\014\012\361\013\uffc0\021\uffc0\035" +
    "\124\036\360\001\002\000\004\035\124\001\002\000\004" +
    "\036\302\001\002\000\022\006\uffba\007\uffba\023\uffba\034" +
    "\uffba\041\uffba\045\uffba\047\uffba\053\uffba\001\002\000\024" +
    "\006\uff62\007\uff62\023\uff62\034\uff62\041\uff62\042\114\045" +
    "\uff62\047\uff62\053\uff62\001\002\000\006\013\117\021\120" +
    "\001\002\000\006\013\uffbc\021\uffbc\001\002\000\024\006" +
    "\uff62\007\uff62\023\uff62\034\uff62\041\uff62\042\114\045\uff62" +
    "\047\uff62\053\uff62\001\002\000\022\006\uffca\007\uffca\023" +
    "\uffca\034\uffca\041\uffca\045\uffca\047\uffca\053\uffca\001\002" +
    "\000\022\006\uffb9\007\uffb9\023\uffb9\034\uffb9\041\uffb9\045" +
    "\uffb9\047\uffb9\053\uffb9\001\002\000\024\006\uff62\007\uff62" +
    "\023\uff62\034\uff62\041\uff62\042\114\045\uff62\047\uff62\053" +
    "\uff62\001\002\000\012\002\uffe8\007\uffe8\053\uffe8\054\uffe8" +
    "\001\002\000\004\007\113\001\002\000\012\002\uffe7\007" +
    "\uffe7\053\uffe7\054\uffe7\001\002\000\030\006\uff63\007\uff63" +
    "\015\uff63\023\uff63\034\uff63\041\uff63\045\uff63\046\uff63\047" +
    "\uff63\053\uff63\054\uff63\001\002\000\022\006\uffcd\007\uffcd" +
    "\023\uffcd\034\uffcd\041\uffcd\045\uffcd\047\uffcd\053\uffcd\001" +
    "\002\000\022\006\uffcb\007\uffcb\023\uffcb\034\uffcb\041\uffcb" +
    "\045\uffcb\047\uffcb\053\uffcb\001\002\000\006\045\122\053" +
    "\123\001\002\000\032\017\uffc3\025\uffc3\030\uffc3\032\uffc3" +
    "\036\uffc3\044\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\056" +
    "\uffc3\057\uffc3\001\002\000\006\013\uffbb\021\uffbb\001\002" +
    "\000\006\013\uffbe\021\uffbe\001\002\000\014\012\126\013" +
    "\uffbd\021\uffbd\035\124\036\125\001\002\000\032\017\146" +
    "\025\145\030\147\032\132\036\131\044\135\050\151\051" +
    "\144\052\140\053\133\056\152\057\137\001\002\000\036" +
    "\011\uff92\013\uff92\017\146\025\145\030\147\032\132\036" +
    "\131\044\135\050\151\051\144\052\140\053\133\056\152" +
    "\057\137\001\002\000\010\005\051\024\053\053\050\001" +
    "\002\000\074\004\uff61\006\uff61\007\uff61\010\uff61\011\uff61" +
    "\013\uff61\014\uff61\015\uff61\016\uff61\020\uff61\021\uff61\022" +
    "\uff61\023\uff61\026\uff61\027\uff61\030\uff61\031\uff61\033\uff61" +
    "\034\uff61\035\130\037\uff61\040\uff61\041\uff61\042\uff61\043" +
    "\uff61\045\uff61\047\uff61\053\uff61\060\uff61\001\002\000\032" +
    "\017\146\025\145\030\147\032\132\036\131\044\135\050" +
    "\151\051\144\052\140\053\133\056\152\057\137\001\002" +
    "\000\036\011\uff92\013\uff92\017\146\025\145\030\147\032" +
    "\132\036\131\044\135\050\151\051\144\052\140\053\133" +
    "\056\152\057\137\001\002\000\026\017\uff90\032\uff90\036" +
    "\uff90\044\uff90\050\uff90\051\uff90\052\uff90\053\uff90\056\uff90" +
    "\057\uff90\001\002\000\074\004\uff75\006\uff75\007\uff75\010" +
    "\uff75\011\uff75\013\uff75\014\uff75\015\uff75\016\uff75\020\uff75" +
    "\022\uff75\023\uff75\026\uff75\027\uff75\030\uff75\031\uff75\033" +
    "\uff75\034\uff75\035\124\036\125\037\uff75\040\uff75\041\uff75" +
    "\042\uff75\043\uff75\045\uff75\047\uff75\053\uff75\060\241\001" +
    "\002\000\072\004\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c" +
    "\013\uff6c\014\uff6c\015\uff6c\016\uff6c\020\uff6c\022\uff6c\023" +
    "\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\033\uff6c\034\uff6c" +
    "\035\124\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\045" +
    "\uff6c\047\uff6c\053\uff6c\060\237\001\002\000\066\004\uff96" +
    "\006\uff96\007\uff96\010\uff96\011\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\020\uff96\022\uff96\023\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\033\uff96\034\uff96\037\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\045\uff96\047\uff96\053\uff96\001\002" +
    "\000\066\004\uff86\006\uff86\007\uff86\010\uff86\011\uff86\013" +
    "\uff86\014\uff86\015\uff86\016\uff86\020\uff86\022\uff86\023\uff86" +
    "\026\uff86\027\uff86\030\uff86\031\uff86\033\uff86\034\uff86\037" +
    "\uff86\040\uff86\041\uff86\042\uff86\043\uff86\045\uff86\047\uff86" +
    "\053\uff86\001\002\000\070\004\uff74\006\uff74\007\uff74\010" +
    "\uff74\011\uff74\013\uff74\014\uff74\015\uff74\016\uff74\020\uff74" +
    "\022\uff74\023\uff74\026\uff74\027\uff74\030\uff74\031\uff74\033" +
    "\uff74\034\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74" +
    "\045\uff74\047\uff74\053\uff74\060\235\001\002\000\066\004" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\020\uff98\022\uff98\023\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\033\uff98\034\uff98\037\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\045\uff98\047\uff98\053\uff98\001" +
    "\002\000\024\017\146\036\131\044\135\050\151\051\144" +
    "\052\140\053\133\056\152\057\137\001\002\000\070\004" +
    "\uff76\006\uff76\007\uff76\010\uff76\011\uff76\013\uff76\014\uff76" +
    "\015\uff76\016\uff76\020\uff76\022\uff76\023\uff76\026\uff76\027" +
    "\uff76\030\uff76\031\uff76\033\uff76\034\uff76\037\uff76\040\uff76" +
    "\041\uff76\042\uff76\043\uff76\045\uff76\047\uff76\053\uff76\060" +
    "\232\001\002\000\036\004\177\010\231\014\200\016\201" +
    "\020\207\022\203\026\213\027\210\030\176\031\205\033" +
    "\204\037\211\040\202\043\206\001\002\000\066\004\uff99" +
    "\006\uff99\007\uff99\010\uff99\011\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\020\uff99\022\uff99\023\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\033\uff99\034\uff99\037\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\045\uff99\047\uff99\053\uff99\001\002" +
    "\000\004\036\174\001\002\000\066\004\uff95\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\013\uff95\014\uff95\015\uff95\016\uff95" +
    "\020\uff95\022\uff95\023\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\033\uff95\034\uff95\037\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\045\uff95\047\uff95\053\uff95\001\002\000\026\017" +
    "\uff8e\030\uff8e\036\uff8e\044\uff8e\050\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\056\uff8e\057\uff8e\001\002\000\066\004\uff6d\006" +
    "\uff6d\007\uff6d\010\uff6d\011\uff6d\013\uff6d\014\uff6d\015\uff6d" +
    "\016\uff6d\020\uff6d\022\uff6d\023\uff6d\026\uff6d\027\uff6d\030" +
    "\uff6d\031\uff6d\033\uff6d\034\uff6d\037\uff6d\040\uff6d\041\uff6d" +
    "\042\uff6d\043\uff6d\045\uff6d\047\uff6d\053\uff6d\001\002\000" +
    "\066\004\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\020\uff9a\022\uff9a\023\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\045\uff9a\047\uff9a\053" +
    "\uff9a\001\002\000\004\053\161\001\002\000\026\017\uff8b" +
    "\030\160\036\uff8b\044\uff8b\050\uff8b\051\uff8b\052\uff8b\053" +
    "\uff8b\056\uff8b\057\uff8b\001\002\000\026\017\uff8c\032\157" +
    "\036\uff8c\044\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\056" +
    "\uff8c\057\uff8c\001\002\000\066\004\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\013\uff87\014\uff87\015\uff87\016\uff87\020" +
    "\uff87\022\uff87\023\uff87\026\uff87\027\uff87\030\uff87\031\uff87" +
    "\033\uff87\034\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\045\uff87\047\uff87\053\uff87\001\002\000\066\004\uff97" +
    "\006\uff97\007\uff97\010\uff97\011\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\020\uff97\022\uff97\023\uff97\026\uff97\027\uff97" +
    "\030\uff97\031\uff97\033\uff97\034\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\045\uff97\047\uff97\053\uff97\001\002" +
    "\000\026\017\uff8f\032\uff8f\036\uff8f\044\uff8f\050\uff8f\051" +
    "\uff8f\052\uff8f\053\uff8f\056\uff8f\057\uff8f\001\002\000\026" +
    "\017\uff8d\030\uff8d\036\uff8d\044\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\056\uff8d\057\uff8d\001\002\000\070\004\uff6e" +
    "\006\uff6e\007\uff6e\010\uff6e\011\uff6e\013\uff6e\014\uff6e\015" +
    "\uff6e\016\uff6e\020\uff6e\022\uff6e\023\uff6e\026\uff6e\027\uff6e" +
    "\030\uff6e\031\uff6e\033\uff6e\034\uff6e\037\uff6e\040\uff6e\041" +
    "\uff6e\042\uff6e\043\uff6e\045\uff6e\047\uff6e\053\uff6e\060\162" +
    "\001\002\000\004\053\165\001\002\000\070\004\uff6f\006" +
    "\uff6f\007\uff6f\010\uff6f\011\uff6f\013\uff6f\014\uff6f\015\uff6f" +
    "\016\uff6f\020\uff6f\022\uff6f\023\uff6f\026\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\033\uff6f\034\uff6f\037\uff6f\040\uff6f\041\uff6f" +
    "\042\uff6f\043\uff6f\045\uff6f\047\uff6f\053\uff6f\060\170\001" +
    "\002\000\070\004\uff65\006\uff65\007\uff65\010\uff65\011\uff65" +
    "\013\uff65\014\uff65\015\uff65\016\uff65\020\uff65\022\uff65\023" +
    "\uff65\026\uff65\027\uff65\030\uff65\031\uff65\033\uff65\034\uff65" +
    "\037\uff65\040\uff65\041\uff65\042\uff65\043\uff65\045\uff65\047" +
    "\uff65\053\uff65\060\uff65\001\002\000\074\004\uff67\006\uff67" +
    "\007\uff67\010\uff67\011\uff67\013\uff67\014\uff67\015\uff67\016" +
    "\uff67\020\uff67\022\uff67\023\uff67\026\uff67\027\uff67\030\uff67" +
    "\031\uff67\033\uff67\034\uff67\035\124\036\125\037\uff67\040" +
    "\uff67\041\uff67\042\uff67\043\uff67\045\uff67\047\uff67\053\uff67" +
    "\060\uff67\001\002\000\072\004\uff66\006\uff66\007\uff66\010" +
    "\uff66\011\uff66\013\uff66\014\uff66\015\uff66\016\uff66\020\uff66" +
    "\022\uff66\023\uff66\026\uff66\027\uff66\030\uff66\031\uff66\033" +
    "\uff66\034\uff66\035\124\037\uff66\040\uff66\041\uff66\042\uff66" +
    "\043\uff66\045\uff66\047\uff66\053\uff66\060\uff66\001\002\000" +
    "\074\004\uff60\006\uff60\007\uff60\010\uff60\011\uff60\013\uff60" +
    "\014\uff60\015\uff60\016\uff60\020\uff60\021\uff60\022\uff60\023" +
    "\uff60\026\uff60\027\uff60\030\uff60\031\uff60\033\uff60\034\uff60" +
    "\035\130\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60\045" +
    "\uff60\047\uff60\053\uff60\060\uff60\001\002\000\004\053\172" +
    "\001\002\000\070\004\uff68\006\uff68\007\uff68\010\uff68\011" +
    "\uff68\013\uff68\014\uff68\015\uff68\016\uff68\020\uff68\022\uff68" +
    "\023\uff68\026\uff68\027\uff68\030\uff68\031\uff68\033\uff68\034" +
    "\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\045\uff68" +
    "\047\uff68\053\uff68\060\uff68\001\002\000\074\004\uff6a\006" +
    "\uff6a\007\uff6a\010\uff6a\011\uff6a\013\uff6a\014\uff6a\015\uff6a" +
    "\016\uff6a\020\uff6a\022\uff6a\023\uff6a\026\uff6a\027\uff6a\030" +
    "\uff6a\031\uff6a\033\uff6a\034\uff6a\035\124\036\125\037\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\043\uff6a\045\uff6a\047\uff6a\053" +
    "\uff6a\060\uff6a\001\002\000\072\004\uff69\006\uff69\007\uff69" +
    "\010\uff69\011\uff69\013\uff69\014\uff69\015\uff69\016\uff69\020" +
    "\uff69\022\uff69\023\uff69\026\uff69\027\uff69\030\uff69\031\uff69" +
    "\033\uff69\034\uff69\035\124\037\uff69\040\uff69\041\uff69\042" +
    "\uff69\043\uff69\045\uff69\047\uff69\053\uff69\060\uff69\001\002" +
    "\000\032\017\146\025\145\030\147\032\132\036\131\044" +
    "\135\050\151\051\144\052\140\053\133\056\152\057\137" +
    "\001\002\000\036\004\177\011\212\014\200\016\201\020" +
    "\207\022\203\026\213\027\210\030\176\031\205\033\204" +
    "\037\211\040\202\043\206\001\002\000\032\017\146\025" +
    "\145\030\147\032\132\036\131\044\135\050\151\051\144" +
    "\052\140\053\133\056\152\057\137\001\002\000\032\017" +
    "\146\025\145\030\147\032\132\036\131\044\135\050\151" +
    "\051\144\052\140\053\133\056\152\057\137\001\002\000" +
    "\032\017\146\025\145\030\147\032\132\036\131\044\135" +
    "\050\151\051\144\052\140\053\133\056\152\057\137\001" +
    "\002\000\032\017\146\025\145\030\147\032\132\036\131" +
    "\044\135\050\151\051\144\052\140\053\133\056\152\057" +
    "\137\001\002\000\032\017\146\025\145\030\147\032\132" +
    "\036\131\044\135\050\151\051\144\052\140\053\133\056" +
    "\152\057\137\001\002\000\032\017\146\025\145\030\147" +
    "\032\132\036\131\044\135\050\151\051\144\052\140\053" +
    "\133\056\152\057\137\001\002\000\032\017\146\025\145" +
    "\030\147\032\132\036\131\044\135\050\151\051\144\052" +
    "\140\053\133\056\152\057\137\001\002\000\032\017\146" +
    "\025\145\030\147\032\132\036\131\044\135\050\151\051" +
    "\144\052\140\053\133\056\152\057\137\001\002\000\032" +
    "\017\146\025\145\030\147\032\132\036\131\044\135\050" +
    "\151\051\144\052\140\053\133\056\152\057\137\001\002" +
    "\000\032\017\146\025\145\030\147\032\132\036\131\044" +
    "\135\050\151\051\144\052\140\053\133\056\152\057\137" +
    "\001\002\000\032\017\146\025\145\030\147\032\132\036" +
    "\131\044\135\050\151\051\144\052\140\053\133\056\152" +
    "\057\137\001\002\000\032\017\146\025\145\030\147\032" +
    "\132\036\131\044\135\050\151\051\144\052\140\053\133" +
    "\056\152\057\137\001\002\000\066\004\uff85\006\uff85\007" +
    "\uff85\010\uff85\011\uff85\013\uff85\014\uff85\015\uff85\016\uff85" +
    "\020\uff85\022\uff85\023\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\033\uff85\034\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\045\uff85\047\uff85\053\uff85\001\002\000\032\017" +
    "\146\025\145\030\147\032\132\036\131\044\135\050\151" +
    "\051\144\052\140\053\133\056\152\057\137\001\002\000" +
    "\066\004\uff81\006\uff81\007\uff81\010\uff81\011\uff81\013\uff81" +
    "\014\200\015\uff81\016\uff81\020\uff81\022\uff81\023\uff81\026" +
    "\uff81\027\uff81\030\176\031\205\033\uff81\034\uff81\037\uff81" +
    "\040\202\041\uff81\042\uff81\043\206\045\uff81\047\uff81\053" +
    "\uff81\001\002\000\066\004\177\006\uff7d\007\uff7d\010\uff7d" +
    "\011\uff7d\013\uff7d\014\200\015\uff7d\016\201\020\207\022" +
    "\203\023\uff7d\026\213\027\210\030\176\031\205\033\204" +
    "\034\uff7d\037\uff7d\040\202\041\uff7d\042\uff7d\043\206\045" +
    "\uff7d\047\uff7d\053\uff7d\001\002\000\066\004\uff80\006\uff80" +
    "\007\uff80\010\uff80\011\uff80\013\uff80\014\200\015\uff80\016" +
    "\uff80\020\uff80\022\uff80\023\uff80\026\uff80\027\uff80\030\176" +
    "\031\205\033\uff80\034\uff80\037\uff80\040\202\041\uff80\042" +
    "\uff80\043\206\045\uff80\047\uff80\053\uff80\001\002\000\066" +
    "\004\uff83\006\uff83\007\uff83\010\uff83\011\uff83\013\uff83\014" +
    "\200\015\uff83\016\uff83\020\uff83\022\uff83\023\uff83\026\uff83" +
    "\027\uff83\030\176\031\205\033\uff83\034\uff83\037\uff83\040" +
    "\202\041\uff83\042\uff83\043\206\045\uff83\047\uff83\053\uff83" +
    "\001\002\000\066\004\uff79\006\uff79\007\uff79\010\uff79\011" +
    "\uff79\013\uff79\014\uff79\015\uff79\016\uff79\020\uff79\022\uff79" +
    "\023\uff79\026\uff79\027\uff79\030\uff79\031\uff79\033\uff79\034" +
    "\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\045\uff79" +
    "\047\uff79\053\uff79\001\002\000\066\004\uff7b\006\uff7b\007" +
    "\uff7b\010\uff7b\011\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b" +
    "\020\uff7b\022\uff7b\023\uff7b\026\uff7b\027\uff7b\030\uff7b\031" +
    "\uff7b\033\uff7b\034\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b" +
    "\043\uff7b\045\uff7b\047\uff7b\053\uff7b\001\002\000\066\004" +
    "\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\013\uff7f\014\200" +
    "\015\uff7f\016\uff7f\020\207\022\203\023\uff7f\026\213\027" +
    "\210\030\176\031\205\033\uff7f\034\uff7f\037\uff7f\040\202" +
    "\041\uff7f\042\uff7f\043\206\045\uff7f\047\uff7f\053\uff7f\001" +
    "\002\000\066\004\uff82\006\uff82\007\uff82\010\uff82\011\uff82" +
    "\013\uff82\014\200\015\uff82\016\uff82\020\uff82\022\uff82\023" +
    "\uff82\026\uff82\027\uff82\030\176\031\205\033\uff82\034\uff82" +
    "\037\uff82\040\202\041\uff82\042\uff82\043\206\045\uff82\047" +
    "\uff82\053\uff82\001\002\000\066\004\uff7a\006\uff7a\007\uff7a" +
    "\010\uff7a\011\uff7a\013\uff7a\014\200\015\uff7a\016\uff7a\020" +
    "\uff7a\022\uff7a\023\uff7a\026\uff7a\027\uff7a\030\uff7a\031\205" +
    "\033\uff7a\034\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\206\045\uff7a\047\uff7a\053\uff7a\001\002\000\066\004\uff84" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\013\uff84\014\200\015" +
    "\uff84\016\uff84\020\207\022\203\023\uff84\026\213\027\210" +
    "\030\176\031\205\033\uff84\034\uff84\037\uff84\040\202\041" +
    "\uff84\042\uff84\043\206\045\uff84\047\uff84\053\uff84\001\002" +
    "\000\066\004\uff78\006\uff78\007\uff78\010\uff78\011\uff78\013" +
    "\uff78\014\uff78\015\uff78\016\uff78\020\uff78\022\uff78\023\uff78" +
    "\026\uff78\027\uff78\030\uff78\031\uff78\033\uff78\034\uff78\037" +
    "\uff78\040\uff78\041\uff78\042\uff78\043\uff78\045\uff78\047\uff78" +
    "\053\uff78\001\002\000\066\004\uff7e\006\uff7e\007\uff7e\010" +
    "\uff7e\011\uff7e\013\uff7e\014\200\015\uff7e\016\201\020\207" +
    "\022\203\023\uff7e\026\213\027\210\030\176\031\205\033" +
    "\204\034\uff7e\037\uff7e\040\202\041\uff7e\042\uff7e\043\206" +
    "\045\uff7e\047\uff7e\053\uff7e\001\002\000\066\004\uff7c\006" +
    "\uff7c\007\uff7c\010\uff7c\011\uff7c\013\uff7c\014\200\015\uff7c" +
    "\016\uff7c\020\uff7c\022\uff7c\023\uff7c\026\uff7c\027\uff7c\030" +
    "\uff7c\031\205\033\uff7c\034\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\206\045\uff7c\047\uff7c\053\uff7c\001\002\000" +
    "\074\004\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\013\uff5f" +
    "\014\uff5f\015\uff5f\016\uff5f\020\uff5f\021\uff5f\022\uff5f\023" +
    "\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f\033\uff5f\034\uff5f" +
    "\035\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\045" +
    "\uff5f\047\uff5f\053\uff5f\060\uff5f\001\002\000\004\053\165" +
    "\001\002\000\070\004\uff70\006\uff70\007\uff70\010\uff70\011" +
    "\uff70\013\uff70\014\uff70\015\uff70\016\uff70\020\uff70\022\uff70" +
    "\023\uff70\026\uff70\027\uff70\030\uff70\031\uff70\033\uff70\034" +
    "\uff70\037\uff70\040\uff70\041\uff70\042\uff70\043\uff70\045\uff70" +
    "\047\uff70\053\uff70\060\170\001\002\000\066\004\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\013\uff88\014\uff88\015\uff88" +
    "\016\uff88\020\uff88\022\uff88\023\uff88\026\uff88\027\uff88\030" +
    "\uff88\031\uff88\033\uff88\034\uff88\037\uff88\040\uff88\041\uff88" +
    "\042\uff88\043\uff88\045\uff88\047\uff88\053\uff88\001\002\000" +
    "\004\053\165\001\002\000\070\004\uff73\006\uff73\007\uff73" +
    "\010\uff73\011\uff73\013\uff73\014\uff73\015\uff73\016\uff73\020" +
    "\uff73\022\uff73\023\uff73\026\uff73\027\uff73\030\uff73\031\uff73" +
    "\033\uff73\034\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043" +
    "\uff73\045\uff73\047\uff73\053\uff73\060\170\001\002\000\004" +
    "\053\165\001\002\000\070\004\uff71\006\uff71\007\uff71\010" +
    "\uff71\011\uff71\013\uff71\014\uff71\015\uff71\016\uff71\020\uff71" +
    "\022\uff71\023\uff71\026\uff71\027\uff71\030\uff71\031\uff71\033" +
    "\uff71\034\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71" +
    "\045\uff71\047\uff71\053\uff71\060\170\001\002\000\004\053" +
    "\165\001\002\000\070\004\uff72\006\uff72\007\uff72\010\uff72" +
    "\011\uff72\013\uff72\014\uff72\015\uff72\016\uff72\020\uff72\022" +
    "\uff72\023\uff72\026\uff72\027\uff72\030\uff72\031\uff72\033\uff72" +
    "\034\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\045" +
    "\uff72\047\uff72\053\uff72\060\170\001\002\000\044\004\177" +
    "\007\uff94\011\uff94\013\uff94\014\200\016\201\020\207\022" +
    "\203\026\213\027\210\030\176\031\205\033\204\037\211" +
    "\040\202\042\uff94\043\206\001\002\000\006\011\uff89\013" +
    "\245\001\002\000\034\011\uff8a\017\146\025\145\030\147" +
    "\032\132\036\131\044\135\050\151\051\144\052\140\053" +
    "\133\056\152\057\137\001\002\000\004\011\247\001\002" +
    "\000\070\004\uff5c\006\uff5c\007\uff5c\010\uff5c\011\uff5c\013" +
    "\uff5c\014\uff5c\015\uff5c\016\uff5c\020\uff5c\022\uff5c\023\uff5c" +
    "\026\uff5c\027\uff5c\030\uff5c\031\uff5c\033\uff5c\034\uff5c\035" +
    "\124\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\045\uff5c" +
    "\047\uff5c\053\uff5c\001\002\000\070\004\uff5d\006\uff5d\007" +
    "\uff5d\010\uff5d\011\uff5d\013\uff5d\014\uff5d\015\uff5d\016\uff5d" +
    "\020\uff5d\022\uff5d\023\uff5d\026\uff5d\027\uff5d\030\uff5d\031" +
    "\uff5d\033\uff5d\034\uff5d\035\130\037\uff5d\040\uff5d\041\uff5d" +
    "\042\uff5d\043\uff5d\045\uff5d\047\uff5d\053\uff5d\001\002\000" +
    "\066\004\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\020\uff6b\022\uff6b\023\uff6b\026" +
    "\uff6b\027\uff6b\030\uff6b\031\uff6b\033\uff6b\034\uff6b\037\uff6b" +
    "\040\uff6b\041\uff6b\042\uff6b\043\uff6b\045\uff6b\047\uff6b\053" +
    "\uff6b\001\002\000\044\004\177\007\uff93\011\uff93\013\uff93" +
    "\014\200\016\201\020\207\022\203\026\213\027\210\030" +
    "\176\031\205\033\204\037\211\040\202\042\uff93\043\206" +
    "\001\002\000\006\013\uffbf\021\uffbf\001\002\000\040\002" +
    "\uffdc\006\uffdc\007\uffdc\013\uffdc\015\uffdc\021\uffdc\023\uffdc" +
    "\034\uffdc\035\256\041\uffdc\042\uffdc\045\uffdc\047\uffdc\053" +
    "\uffdc\054\uffdc\001\002\000\036\002\uffdb\006\uffdb\007\uffdb" +
    "\013\uffdb\015\uffdb\021\uffdb\023\uffdb\034\uffdb\041\uffdb\042" +
    "\uffdb\045\uffdb\047\uffdb\053\uffdb\054\uffdb\001\002\000\034" +
    "\010\266\017\146\025\145\030\147\032\132\036\131\044" +
    "\135\050\151\051\144\052\140\053\133\056\152\057\137" +
    "\001\002\000\040\002\uffd4\006\uffd4\007\uffd4\013\uffd4\015" +
    "\uffd4\021\uffd4\023\uffd4\034\uffd4\035\264\041\uffd4\042\uffd4" +
    "\045\uffd4\047\uffd4\053\uffd4\054\uffd4\001\002\000\040\002" +
    "\uffd5\006\uffd5\007\uffd5\013\uffd5\015\uffd5\021\uffd5\023\uffd5" +
    "\034\uffd5\035\262\041\uffd5\042\uffd5\045\uffd5\047\uffd5\053" +
    "\uffd5\054\uffd5\001\002\000\036\002\uffd7\006\uffd7\007\uffd7" +
    "\013\uffd7\015\uffd7\021\uffd7\023\uffd7\034\uffd7\041\uffd7\042" +
    "\uffd7\045\uffd7\047\uffd7\053\uffd7\054\uffd7\001\002\000\034" +
    "\010\266\017\146\025\145\030\147\032\132\036\131\044" +
    "\135\050\151\051\144\052\140\053\133\056\152\057\137" +
    "\001\002\000\040\002\uffd6\006\uffd6\007\uffd6\013\uffd6\015" +
    "\uffd6\021\uffd6\023\uffd6\034\uffd6\035\264\041\uffd6\042\uffd6" +
    "\045\uffd6\047\uffd6\053\uffd6\054\uffd6\001\002\000\004\010" +
    "\265\001\002\000\040\002\uffd2\006\uffd2\007\uffd2\013\uffd2" +
    "\015\uffd2\021\uffd2\023\uffd2\034\uffd2\035\uffd2\041\uffd2\042" +
    "\uffd2\045\uffd2\047\uffd2\053\uffd2\054\uffd2\001\002\000\040" +
    "\002\uffd3\006\uffd3\007\uffd3\013\uffd3\015\uffd3\021\uffd3\023" +
    "\uffd3\034\uffd3\035\uffd3\041\uffd3\042\uffd3\045\uffd3\047\uffd3" +
    "\053\uffd3\054\uffd3\001\002\000\036\004\177\010\270\014" +
    "\200\016\201\020\207\022\203\026\213\027\210\030\176" +
    "\031\205\033\204\037\211\040\202\043\206\001\002\000" +
    "\040\002\uffd1\006\uffd1\007\uffd1\013\uffd1\015\uffd1\021\uffd1" +
    "\023\uffd1\034\uffd1\035\uffd1\041\uffd1\042\uffd1\045\uffd1\047" +
    "\uffd1\053\uffd1\054\uffd1\001\002\000\036\004\177\010\272" +
    "\014\200\016\201\020\207\022\203\026\213\027\210\030" +
    "\176\031\205\033\204\037\211\040\202\043\206\001\002" +
    "\000\040\002\uffd0\006\uffd0\007\uffd0\013\uffd0\015\uffd0\021" +
    "\uffd0\023\uffd0\034\uffd0\035\uffd0\041\uffd0\042\uffd0\045\uffd0" +
    "\047\uffd0\053\uffd0\054\uffd0\001\002\000\006\011\275\013" +
    "\274\001\002\000\032\017\146\025\145\030\147\032\132" +
    "\036\131\044\135\050\151\051\144\052\140\053\133\056" +
    "\152\057\137\001\002\000\072\004\uff64\006\uff64\007\uff64" +
    "\010\uff64\011\uff64\013\uff64\014\uff64\015\uff64\016\uff64\020" +
    "\uff64\022\uff64\023\uff64\026\uff64\027\uff64\030\uff64\031\uff64" +
    "\033\uff64\034\uff64\035\uff64\037\uff64\040\uff64\041\uff64\042" +
    "\uff64\043\uff64\045\uff64\047\uff64\053\uff64\060\uff64\001\002" +
    "\000\036\004\177\010\277\014\200\016\201\020\207\022" +
    "\203\026\213\027\210\030\176\031\205\033\204\037\211" +
    "\040\202\043\206\001\002\000\074\004\uff5e\006\uff5e\007" +
    "\uff5e\010\uff5e\011\uff5e\013\uff5e\014\uff5e\015\uff5e\016\uff5e" +
    "\020\uff5e\021\uff5e\022\uff5e\023\uff5e\026\uff5e\027\uff5e\030" +
    "\uff5e\031\uff5e\033\uff5e\034\uff5e\035\uff5e\037\uff5e\040\uff5e" +
    "\041\uff5e\042\uff5e\043\uff5e\045\uff5e\047\uff5e\053\uff5e\060" +
    "\uff5e\001\002\000\022\006\uffcc\007\uffcc\023\uffcc\034\uffcc" +
    "\041\uffcc\045\uffcc\047\uffcc\053\uffcc\001\002\000\016\006" +
    "\313\023\100\034\305\045\070\047\073\053\076\001\002" +
    "\000\032\017\146\025\145\030\147\032\132\036\131\044" +
    "\135\050\151\051\144\052\140\053\133\056\152\057\137" +
    "\001\002\000\036\004\177\011\304\014\200\016\201\020" +
    "\207\022\203\026\213\027\210\030\176\031\205\033\204" +
    "\037\211\040\202\043\206\001\002\000\016\006\uff77\023" +
    "\uff77\034\uff77\045\uff77\047\uff77\053\uff77\001\002\000\022" +
    "\006\uffce\007\uffce\023\uffce\034\uffce\041\uffce\045\uffce\047" +
    "\uffce\053\uffce\001\002\000\024\006\uffaf\007\uffaf\015\uffa6" +
    "\023\uffaf\034\uffaf\041\uffaf\045\uffaf\047\uffaf\053\uffaf\001" +
    "\002\000\024\006\uffba\007\uffba\015\uffa5\023\uffba\034\uffba" +
    "\041\uffba\045\uffba\047\uffba\053\uffba\001\002\000\026\006" +
    "\uff62\007\uff62\015\uff62\023\uff62\034\uff62\041\uff62\042\114" +
    "\045\uff62\047\uff62\053\uff62\001\002\000\026\006\uff62\007" +
    "\uff62\015\uff62\023\uff62\034\uff62\041\uff62\042\114\045\uff62" +
    "\047\uff62\053\uff62\001\002\000\022\006\uffae\007\uffae\023" +
    "\uffae\034\uffae\041\uffae\045\uffae\047\uffae\053\uffae\001\002" +
    "\000\026\006\uff62\007\uff62\015\uff62\023\uff62\034\uff62\041" +
    "\uff62\042\114\045\uff62\047\uff62\053\uff62\001\002\000\026" +
    "\006\uff62\007\uff62\015\uff62\023\uff62\034\uff62\041\uff62\042" +
    "\114\045\uff62\047\uff62\053\uff62\001\002\000\022\006\uffb8" +
    "\007\uffb8\023\uffb8\034\uffb8\041\uffb8\045\uffb8\047\uffb8\053" +
    "\uffb8\001\002\000\004\015\317\001\002\000\016\006\330" +
    "\023\322\034\323\045\070\047\073\053\076\001\002\000" +
    "\026\006\uff62\007\uff62\015\uff62\023\uff62\034\uff62\041\uff62" +
    "\042\114\045\uff62\047\uff62\053\uff62\001\002\000\024\006" +
    "\uffa5\007\uffa5\015\uffa5\023\uffa5\034\uffa5\041\uffa5\045\uffa5" +
    "\047\uffa5\053\uffa5\001\002\000\004\036\302\001\002\000" +
    "\022\006\uffce\007\uffce\023\uffce\034\uffce\041\uffce\045\uffce" +
    "\047\uffce\053\uffce\001\002\000\026\006\uff62\007\uff62\015" +
    "\uff62\023\uff62\034\uff62\041\uff62\042\114\045\uff62\047\uff62" +
    "\053\uff62\001\002\000\024\006\uffa6\007\uffa6\015\uffa6\023" +
    "\uffa6\034\uffa6\041\uffa6\045\uffa6\047\uffa6\053\uffa6\001\002" +
    "\000\024\006\uffb7\007\uffb7\015\uffb7\023\uffb7\034\uffb7\041" +
    "\uffb7\045\uffb7\047\uffb7\053\uffb7\001\002\000\026\006\uff62" +
    "\007\uff62\015\uff62\023\uff62\034\uff62\041\uff62\042\114\045" +
    "\uff62\047\uff62\053\uff62\001\002\000\026\006\uff62\007\uff62" +
    "\015\uff62\023\uff62\034\uff62\041\uff62\042\114\045\uff62\047" +
    "\uff62\053\uff62\001\002\000\024\006\uffaa\007\uffaa\015\uffaa" +
    "\023\uffaa\034\uffaa\041\uffaa\045\uffaa\047\uffaa\053\uffaa\001" +
    "\002\000\024\006\uffa9\007\uffa9\015\uffa9\023\uffa9\034\uffa9" +
    "\041\uffa9\045\uffa9\047\uffa9\053\uffa9\001\002\000\024\006" +
    "\uffa8\007\uffa8\015\uffa8\023\uffa8\034\uffa8\041\uffa8\045\uffa8" +
    "\047\uffa8\053\uffa8\001\002\000\022\006\335\007\336\023" +
    "\100\034\071\041\075\045\070\047\073\053\076\001\002" +
    "\000\006\007\uff62\042\114\001\002\000\024\006\uffab\007" +
    "\uffab\015\uffab\023\uffab\034\uffab\041\uffab\045\uffab\047\uffab" +
    "\053\uffab\001\002\000\004\007\340\001\002\000\024\006" +
    "\uffac\007\uffac\015\uffac\023\uffac\034\uffac\041\uffac\045\uffac" +
    "\047\uffac\053\uffac\001\002\000\004\007\342\001\002\000" +
    "\024\006\uffad\007\uffad\015\uffad\023\uffad\034\uffad\041\uffad" +
    "\045\uffad\047\uffad\053\uffad\001\002\000\016\006\330\023" +
    "\322\034\323\045\070\047\073\053\076\001\002\000\024" +
    "\006\uffa7\007\uffa7\015\uffa7\023\uffa7\034\uffa7\041\uffa7\045" +
    "\uffa7\047\uffa7\053\uffa7\001\002\000\024\006\uffb2\007\uffb2" +
    "\015\uffa9\023\uffb2\034\uffb2\041\uffb2\045\uffb2\047\uffb2\053" +
    "\uffb2\001\002\000\024\006\uffb3\007\uffb3\015\uffaa\023\uffb3" +
    "\034\uffb3\041\uffb3\045\uffb3\047\uffb3\053\uffb3\001\002\000" +
    "\024\006\uffb0\007\uffb0\015\uffa7\023\uffb0\034\uffb0\041\uffb0" +
    "\045\uffb0\047\uffb0\053\uffb0\001\002\000\024\006\uffb1\007" +
    "\uffb1\015\uffa8\023\uffb1\034\uffb1\041\uffb1\045\uffb1\047\uffb1" +
    "\053\uffb1\001\002\000\022\006\352\007\353\023\100\034" +
    "\071\041\075\045\070\047\073\053\076\001\002\000\006" +
    "\007\uff62\042\114\001\002\000\024\006\uffb4\007\uffb4\015" +
    "\uffab\023\uffb4\034\uffb4\041\uffb4\045\uffb4\047\uffb4\053\uffb4" +
    "\001\002\000\004\007\355\001\002\000\024\006\uffb5\007" +
    "\uffb5\015\uffac\023\uffb5\034\uffb5\041\uffb5\045\uffb5\047\uffb5" +
    "\053\uffb5\001\002\000\004\007\357\001\002\000\024\006" +
    "\uffb6\007\uffb6\015\uffad\023\uffb6\034\uffb6\041\uffb6\045\uffb6" +
    "\047\uffb6\053\uffb6\001\002\000\036\011\uff92\013\uff92\017" +
    "\146\025\145\030\147\032\132\036\131\044\135\050\151" +
    "\051\144\052\140\053\133\056\152\057\137\001\002\000" +
    "\010\005\051\024\053\053\050\001\002\000\032\006\uffc6" +
    "\007\uffc6\013\uffc2\015\uffc6\021\uffc2\023\uffc6\034\uffc6\041" +
    "\uffc6\042\uffc6\045\uffc6\047\uffc6\053\uffc6\001\002\000\006" +
    "\011\364\013\274\001\002\000\030\006\uff91\007\uff91\015" +
    "\uff91\023\uff91\034\uff91\035\uff64\041\uff91\042\uff91\045\uff91" +
    "\047\uff91\053\uff91\001\002\000\010\007\uff62\013\274\042" +
    "\114\001\002\000\004\007\uffc5\001\002\000\016\006\377" +
    "\023\322\034\373\045\070\047\073\053\076\001\002\000" +
    "\026\006\uff62\007\uff62\015\uff62\023\uff62\034\uff62\041\uff62" +
    "\042\114\045\uff62\047\uff62\053\uff62\001\002\000\024\006" +
    "\uff9d\007\uff9d\015\uff9d\023\uff9d\034\uff9d\041\uff9d\045\uff9d" +
    "\047\uff9d\053\uff9d\001\002\000\024\006\uffa4\007\uffa4\015" +
    "\uffa4\023\uffa4\034\uffa4\041\uffa4\045\uffa4\047\uffa4\053\uffa4" +
    "\001\002\000\022\006\uffce\007\uffce\023\uffce\034\uffce\041" +
    "\uffce\045\uffce\047\uffce\053\uffce\001\002\000\026\006\uff62" +
    "\007\uff62\015\uff62\023\uff62\034\uff62\041\uff62\042\114\045" +
    "\uff62\047\uff62\053\uff62\001\002\000\024\006\uff9c\007\uff9c" +
    "\015\uff9c\023\uff9c\034\uff9c\041\uff9c\045\uff9c\047\uff9c\053" +
    "\uff9c\001\002\000\026\006\uff62\007\uff62\015\uff62\023\uff62" +
    "\034\uff62\041\uff62\042\114\045\uff62\047\uff62\053\uff62\001" +
    "\002\000\026\006\uff62\007\uff62\015\uff62\023\uff62\034\uff62" +
    "\041\uff62\042\114\045\uff62\047\uff62\053\uff62\001\002\000" +
    "\024\006\uffa0\007\uffa0\015\uffa0\023\uffa0\034\uffa0\041\uffa0" +
    "\045\uffa0\047\uffa0\053\uffa0\001\002\000\024\006\uff9f\007" +
    "\uff9f\015\uff9f\023\uff9f\034\uff9f\041\uff9f\045\uff9f\047\uff9f" +
    "\053\uff9f\001\002\000\024\006\uff9e\007\uff9e\015\uff9e\023" +
    "\uff9e\034\uff9e\041\uff9e\045\uff9e\047\uff9e\053\uff9e\001\002" +
    "\000\022\006\u0104\007\u0105\023\100\034\071\041\075\045" +
    "\070\047\073\053\076\001\002\000\006\007\uff62\042\114" +
    "\001\002\000\024\006\uffa1\007\uffa1\015\uffa1\023\uffa1\034" +
    "\uffa1\041\uffa1\045\uffa1\047\uffa1\053\uffa1\001\002\000\004" +
    "\007\u0107\001\002\000\024\006\uffa2\007\uffa2\015\uffa2\023" +
    "\uffa2\034\uffa2\041\uffa2\045\uffa2\047\uffa2\053\uffa2\001\002" +
    "\000\004\007\u0109\001\002\000\024\006\uffa3\007\uffa3\015" +
    "\uffa3\023\uffa3\034\uffa3\041\uffa3\045\uffa3\047\uffa3\053\uffa3" +
    "\001\002\000\024\006\uff9b\007\uff9b\015\uff9b\023\uff9b\034" +
    "\uff9b\041\uff9b\045\uff9b\047\uff9b\053\uff9b\001\002\000\016" +
    "\007\u0110\023\100\034\071\045\070\047\073\053\076\001" +
    "\002\000\040\007\uff92\013\uff92\017\146\025\145\030\147" +
    "\032\132\036\131\042\uff92\044\135\050\151\051\144\052" +
    "\140\053\133\056\152\057\137\001\002\000\010\007\uff62" +
    "\013\274\042\114\001\002\000\004\007\u010f\001\002\000" +
    "\022\006\uffc7\007\uffc7\023\uffc7\034\uffc7\041\uffc7\045\uffc7" +
    "\047\uffc7\053\uffc7\001\002\000\022\006\uffc8\007\uffc8\023" +
    "\uffc8\034\uffc8\041\uffc8\045\uffc8\047\uffc8\053\uffc8\001\002" +
    "\000\060\004\177\006\uffc4\007\uffc4\014\200\015\uffc4\016" +
    "\201\020\207\022\203\023\uffc4\026\213\027\210\030\176" +
    "\031\205\033\204\034\uffc4\037\211\040\202\041\uffc4\042" +
    "\uffc4\043\206\045\uffc4\047\uffc4\053\uffc4\001\002\000\010" +
    "\005\051\024\053\053\050\001\002\000\020\007\uffce\023" +
    "\uffce\034\uffce\041\uffce\045\uffce\047\uffce\053\uffce\001\002" +
    "\000\020\007\u0115\023\100\034\071\041\075\045\070\047" +
    "\073\053\076\001\002\000\012\002\uffe9\007\uffe9\053\uffe9" +
    "\054\uffe9\001\002\000\004\007\u0117\001\002\000\012\002" +
    "\uffea\007\uffea\053\uffea\054\uffea\001\002\000\006\013\uffe1" +
    "\034\uffe1\001\002\000\006\013\uffe2\034\uffe2\001\002\000" +
    "\010\005\051\024\053\053\050\001\002\000\012\002\uffef" +
    "\007\uffef\053\uffef\054\uffef\001\002\000\012\042\114\046" +
    "\uff62\053\uff62\054\uff62\001\002\000\010\046\uffee\053\uffee" +
    "\054\uffee\001\002\000\010\002\ufffd\053\ufffd\054\ufffd\001" +
    "\002\000\010\002\ufffe\053\ufffe\054\ufffe\001\002\000\010" +
    "\002\ufffc\053\ufffc\054\ufffc\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\010\011\003\012\005\013\004\001\001\000" +
    "\002\001\001\000\020\002\012\003\007\006\015\007\014" +
    "\014\010\015\011\016\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\u011d\006\u011f\007\014\014\u011e\015" +
    "\011\016\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\036\001\001\000\002\001" +
    "\001\000\004\005\022\001\001\000\004\007\032\001\001" +
    "\000\002\001\001\000\016\004\024\006\025\007\014\014" +
    "\026\015\011\016\006\001\001\000\014\006\030\007\014" +
    "\014\031\015\011\016\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\063\001\001\000\004" +
    "\017\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\051\063\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\051" +
    "\063\061\001\001\000\002\001\001\000\006\022\051\063" +
    "\u0118\001\001\000\002\001\001\000\004\027\065\001\001" +
    "\000\034\030\071\031\107\032\111\033\104\034\102\035" +
    "\066\036\105\040\073\044\101\051\103\054\100\055\106" +
    "\065\076\001\001\000\026\042\147\043\155\046\u0110\050" +
    "\154\051\141\060\153\061\152\062\140\065\133\066\135" +
    "\001\001\000\002\001\001\000\004\027\u010a\001\001\000" +
    "\002\001\001\000\004\057\366\001\001\000\002\001\001" +
    "\000\030\042\147\043\155\045\364\046\242\050\154\051" +
    "\141\060\153\061\152\062\140\065\133\066\135\001\001" +
    "\000\004\052\126\001\001\000\004\052\166\001\001\000" +
    "\004\057\300\001\001\000\002\001\001\000\004\047\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\120\065\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\126" +
    "\001\001\000\026\042\147\043\155\046\275\050\154\051" +
    "\141\060\153\061\152\062\140\065\133\066\135\001\001" +
    "\000\030\042\147\043\155\045\272\046\242\050\154\051" +
    "\141\060\153\061\152\062\140\065\133\066\135\001\001" +
    "\000\010\021\252\022\253\023\254\001\001\000\002\001" +
    "\001\000\026\042\147\043\155\046\142\050\154\051\141" +
    "\060\153\061\152\062\140\065\133\066\135\001\001\000" +
    "\030\042\147\043\155\045\243\046\242\050\154\051\141" +
    "\060\153\061\152\062\140\065\133\066\135\001\001\000" +
    "\002\001\001\000\004\052\126\001\001\000\004\052\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\042\147\043\155\050\233" +
    "\051\141\065\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\162\051\163\065\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\126\001\001\000\004\052\166\001\001\000\002\001\001" +
    "\000\006\051\170\065\172\001\001\000\002\001\001\000" +
    "\004\052\126\001\001\000\004\052\166\001\001\000\026" +
    "\042\147\043\155\046\174\050\154\051\141\060\153\061" +
    "\152\062\140\065\133\066\135\001\001\000\002\001\001" +
    "\000\026\042\147\043\155\046\227\050\154\051\141\060" +
    "\153\061\152\062\140\065\133\066\135\001\001\000\026" +
    "\042\147\043\155\046\226\050\154\051\141\060\153\061" +
    "\152\062\140\065\133\066\135\001\001\000\026\042\147" +
    "\043\155\046\225\050\154\051\141\060\153\061\152\062" +
    "\140\065\133\066\135\001\001\000\026\042\147\043\155" +
    "\046\224\050\154\051\141\060\153\061\152\062\140\065" +
    "\133\066\135\001\001\000\026\042\147\043\155\046\223" +
    "\050\154\051\141\060\153\061\152\062\140\065\133\066" +
    "\135\001\001\000\026\042\147\043\155\046\222\050\154" +
    "\051\141\060\153\061\152\062\140\065\133\066\135\001" +
    "\001\000\026\042\147\043\155\046\221\050\154\051\141" +
    "\060\153\061\152\062\140\065\133\066\135\001\001\000" +
    "\026\042\147\043\155\046\220\050\154\051\141\060\153" +
    "\061\152\062\140\065\133\066\135\001\001\000\026\042" +
    "\147\043\155\046\217\050\154\051\141\060\153\061\152" +
    "\062\140\065\133\066\135\001\001\000\026\042\147\043" +
    "\155\046\216\050\154\051\141\060\153\061\152\062\140" +
    "\065\133\066\135\001\001\000\026\042\147\043\155\046" +
    "\215\050\154\051\141\060\153\061\152\062\140\065\133" +
    "\066\135\001\001\000\026\042\147\043\155\046\214\050" +
    "\154\051\141\060\153\061\152\062\140\065\133\066\135" +
    "\001\001\000\002\001\001\000\026\042\147\043\155\046" +
    "\213\050\154\051\141\060\153\061\152\062\140\065\133" +
    "\066\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\232\051" +
    "\163\065\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\235\051\163\065\165\001\001\000\002\001" +
    "\001\000\010\010\237\051\163\065\165\001\001\000\002" +
    "\001\001\000\010\010\241\051\163\065\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\245\001\001" +
    "\000\026\042\147\043\155\046\251\050\154\051\141\060" +
    "\153\061\152\062\140\065\133\066\135\001\001\000\002" +
    "\001\001\000\006\052\247\067\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\260\025\257\026\256\001\001\000\002\001" +
    "\001\000\026\042\147\043\155\046\270\050\154\051\141" +
    "\060\153\061\152\062\140\065\133\066\135\001\001\000" +
    "\002\001\001\000\004\026\262\001\001\000\002\001\001" +
    "\000\026\042\147\043\155\046\266\050\154\051\141\060" +
    "\153\061\152\062\140\065\133\066\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\042\147\043" +
    "\155\046\251\050\154\051\141\060\153\061\152\062\140" +
    "\065\133\066\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\031\313" +
    "\033\310\034\102\035\066\036\311\037\314\040\305\044" +
    "\307\051\103\053\315\054\306\055\106\065\076\001\001" +
    "\000\026\042\147\043\155\046\302\050\154\051\141\060" +
    "\153\061\152\062\140\065\133\066\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\347\001\001" +
    "\000\004\047\346\001\001\000\002\001\001\000\004\047" +
    "\345\001\001\000\004\047\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\031\326\033\317\034\102\035" +
    "\066\040\324\044\323\051\103\053\325\054\320\065\076" +
    "\001\001\000\004\047\343\001\001\000\002\001\001\000" +
    "\004\057\342\001\001\000\004\027\333\001\001\000\004" +
    "\047\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\331\001\001\000\004\047\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\030" +
    "\071\031\107\032\336\033\104\034\102\035\066\036\105" +
    "\040\073\044\101\051\103\054\100\055\106\065\076\001" +
    "\001\000\004\047\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\031\326\033\317\034\102\035\066\040\324" +
    "\044\323\051\103\053\315\054\320\065\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\030\071\031\107\032" +
    "\353\033\104\034\102\035\066\036\105\040\073\044\101" +
    "\051\103\054\100\055\106\065\076\001\001\000\004\047" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\042" +
    "\147\043\155\045\362\046\242\050\154\051\141\060\153" +
    "\061\152\062\140\065\133\066\135\001\001\000\010\021" +
    "\361\022\253\023\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\365\001\001\000" +
    "\002\001\001\000\026\031\375\033\367\034\102\035\066" +
    "\040\374\041\371\044\373\051\103\054\370\065\076\001" +
    "\001\000\004\047\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\u0102\001\001\000\004\047\u0101\001" +
    "\001\000\002\001\001\000\004\047\u0100\001\001\000\004" +
    "\047\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\030\071\031\107\032\u0105\033\104" +
    "\034\102\035\066\036\105\040\073\044\101\051\103\054" +
    "\100\055\106\065\076\001\001\000\004\047\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\030\071\031\107\033\104\034\102\035\066\036\105\040" +
    "\073\044\101\051\103\054\100\055\106\065\076\001\001" +
    "\000\030\042\147\043\155\045\u010c\046\242\050\154\051" +
    "\141\060\153\061\152\062\140\065\133\066\135\001\001" +
    "\000\004\047\u010d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\051" +
    "\063\u0117\001\001\000\004\027\u0113\001\001\000\034\030" +
    "\071\031\107\032\u0115\033\104\034\102\035\066\036\105" +
    "\040\073\044\101\051\103\054\100\055\106\065\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\u011a\022" +
    "\253\023\254\001\001\000\002\001\001\000\004\047\u011c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CupParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CupParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CupParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return ((JFlexLexer)getScanner()).next(); 
    }

 
 
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Syntax error ");

    if (info instanceof XiSymbol){
      XiSymbol x = (XiSymbol)info;
      m.append( "on line " + x.position().lineStart() );
      m.append( " at token " + x.value() + "\n");
      try{
        BufferedReader br = new BufferedReader(new FileReader(x.position().unit()));
        String line = "could not read";
        for(int i=0;i<x.position().lineStart();i++){
          line = br.readLine();
        }
        m.append("  ");
        for(int i=0;i<x.position().columnStart()-1;i++){
          m.append(" ");
      }
      m.append("v\n");
      m.append("  " + line.replace('\t',' ') + "\n");
      }catch (FileNotFoundException f){
        System.err.println("Unable to find file"+x.position().unit());
      }catch (IOException i){
        System.err.println("Unable to read file"+x.position().unit());
      }
    }
    //m.append(" : "+message);

    System.out.println(m);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    //throw new RuntimeException("Fatal Syntax Error");
  }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CupParser$actions {
  private final CupParser parser;

  /** Constructor */
  CUP$CupParser$actions(CupParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CupParser$do_action(
    int                        CUP$CupParser$act_num,
    java_cup.runtime.lr_parser CUP$CupParser$parser,
    java.util.Stack            CUP$CupParser$stack,
    int                        CUP$CupParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CupParser$result;

      /* select the action based on the action number */
      switch (CUP$CupParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // bracket_index_opt ::= 
            {
              ArrayList<ExpressionNode> RESULT =null;
		 RESULT = null; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("bracket_index_opt",53, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // bracket_index_opt ::= bracket_index 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayList<ExpressionNode> c = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("bracket_index_opt",53, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // bracket_index ::= OPEN_BRACKET expression CLOSE_BRACKET 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 ArrayList<ExpressionNode> ar = new ArrayList<ExpressionNode>(); 
																				ar.add(e);
																				RESULT = ar; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("bracket_index",40, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // bracket_index ::= bracket_index OPEN_BRACKET expression CLOSE_BRACKET 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		ArrayList<ExpressionNode> b = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 b.add(e); RESULT = b; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("bracket_index",40, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // array_lookup ::= function_call bracket_index 
            {
              ArrayLookUpNode RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		FunctionCallNode func = (FunctionCallNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayList<ExpressionNode> i = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new ArrayLookUpNode(func,i,func.position(),i.get(0).position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("array_lookup",39, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // array_lookup ::= IDENTIFIER bracket_index 
            {
              ArrayLookUpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayList<ExpressionNode> i = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new ArrayLookUpNode(id.value(),i,id.position(),i.get(0).position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("array_lookup",39, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // semicolon_opt ::= 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("semicolon_opt",37, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // semicolon_opt ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("semicolon_opt",37, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // function_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
              FunctionCallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ArrayList<ExpressionNode> args = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new FunctionCallNode(id.value(),args,id.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("function_call",51, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // accessor ::= array_lookup 
            {
              AccessorNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayLookUpNode f = (ArrayLookUpNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 AccessorNode a = new AccessorNode(f.position()); a.add(f); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("accessor",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // accessor ::= function_call 
            {
              AccessorNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionCallNode f = (FunctionCallNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 AccessorNode a = new AccessorNode(f.position()); a.add(f); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("accessor",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // accessor ::= IDENTIFIER 
            {
              AccessorNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 AccessorNode a = new AccessorNode(id.position()); a.add(new VarNode(id.value(),id.position(),id.position())); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("accessor",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // accessor ::= accessor PERIOD array_lookup 
            {
              AccessorNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		AccessorNode a = (AccessorNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayLookUpNode f = (ArrayLookUpNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		a.add(f); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("accessor",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // accessor ::= accessor PERIOD function_call 
            {
              AccessorNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		AccessorNode a = (AccessorNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionCallNode f = (FunctionCallNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		a.add(f); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("accessor",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // accessor ::= accessor PERIOD IDENTIFIER 
            {
              AccessorNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		AccessorNode a = (AccessorNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 a.add(new VarNode(id.value(),id.position(),id.position())); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("accessor",6, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // fil ::= OPEN_PAREN expression_list comma_opt CLOSE_PAREN bracket_index_opt 
            {
              SyntaxNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		XiSymbol f = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		ArrayList<ExpressionNode> e = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol l = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayList<ExpressionNode> b = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e,b,f.position(),l.position()); ((ExpressionNode)RESULT).setParFlag(true);
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // fil ::= function_call 
            {
              SyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionCallNode p = (FunctionCallNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // fil ::= literal 
            {
              SyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		SyntaxNode p = (SyntaxNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // fil ::= NEW IDENTIFIER 
            {
              SyntaxNode RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int objright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol obj = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ObjectNode(obj.value(),obj.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // fil ::= NEW IDENTIFIER PERIOD accessor 
            {
              SyntaxNode RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol obj = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		AccessorNode e = (AccessorNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ObjectNode(obj.value(),e,obj.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fil ::= array_lookup PERIOD accessor 
            {
              SyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ArrayLookUpNode id = (ArrayLookUpNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		AccessorNode a = (AccessorNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 a.addInFront(id,id.position()); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // fil ::= function_call PERIOD accessor 
            {
              SyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		FunctionCallNode id = (FunctionCallNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		AccessorNode a = (AccessorNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 a.addInFront(id,id.position()); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // fil ::= IDENTIFIER PERIOD accessor 
            {
              SyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		AccessorNode a = (AccessorNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 a.addInFront(new VarNode(id.value(),id.position(),id.position())); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // fil ::= THIS PERIOD accessor 
            {
              SyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol p = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		AccessorNode a = (AccessorNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 a.addInFront(new ThisNode()); RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // fil ::= THIS 
            {
              SyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol p = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ThisNode(p.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // fil ::= IDENTIFIER 
            {
              SyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol p = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new VarNode(p.value(),p.position(),p.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // fil ::= array_lookup 
            {
              SyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayLookUpNode p = (ArrayLookUpNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("fil",38, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_paren ::= OPEN_PAREN expression CLOSE_PAREN 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		RESULT = e; RESULT.setParFlag(true);
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression_paren",45, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // binop ::= expression DIVIDE expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol m = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new MathFunctionNode(Sym.DIVIDE,m.position(),m.position()), e2,e1.position(),e2.position());
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // binop ::= expression TIMES expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol m = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new MathFunctionNode(Sym.TIMES,m.position(),m.position()), e2,e1.position(),e2.position());
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // binop ::= expression PLUS expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol m = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new MathFunctionNode(Sym.PLUS,m.position(),m.position()), e2,e1.position(),e2.position());
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // binop ::= expression MODULO expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol m = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new MathFunctionNode(Sym.MODULO,m.position(),m.position()), e2,e1.position(),e2.position());
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // binop ::= expression MINUS expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol m = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new MathFunctionNode(Sym.MINUS,m.position(),m.position()), e2,e1.position(),e2.position());
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // binop ::= expression OR expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new ComparisonOperatorNode(Sym.OR,o.position(),o.position()), e2,e1.position(),e2.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // binop ::= expression AND expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new ComparisonOperatorNode(Sym.AND,o.position(),o.position()), e2,e1.position(),e2.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // binop ::= expression NOT_EQUAL expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new ComparisonOperatorNode(Sym.NOT_EQUAL,o.position(),o.position()), e2,e1.position(),e2.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // binop ::= expression LT expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new ComparisonOperatorNode(Sym.LT,o.position(),o.position()), e2,e1.position(),e2.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // binop ::= expression LEQ expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new ComparisonOperatorNode(Sym.LEQ,o.position(),o.position()), e2,e1.position(),e2.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // binop ::= expression GT expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new ComparisonOperatorNode(Sym.GT,o.position(),o.position()), e2,e1.position(),e2.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // binop ::= expression GEQ expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new ComparisonOperatorNode(Sym.GEQ,o.position(),o.position()), e2,e1.position(),e2.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // binop ::= expression EQUAL expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(e1, new ComparisonOperatorNode(Sym.EQUAL,o.position(),o.position()), e2,e1.position(),e2.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("binop",52, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= LENGTH OPEN_PAREN expression CLOSE_PAREN 
            {
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ExpressionNode arg = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new ExpressionNode("length",arg, id.position(),arg.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= binop 
            {
              ExpressionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= fil 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		SyntaxNode f = (SyntaxNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(f,f.position(),f.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= unary fil 
            {
              ExpressionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		SyntaxNode n = (SyntaxNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		SyntaxNode f = (SyntaxNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExpressionNode(n,f,n.position(),f.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // comma_opt ::= 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comma_opt",54, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // comma_opt ::= COMMA 
            {
              Object RESULT =null;

              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("comma_opt",54, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unary ::= minus_opt 
            {
              SyntaxNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		MinusNode n = (MinusNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT= n; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("unary",48, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unary ::= not_opt 
            {
              SyntaxNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		NotNode n = (NotNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT= n; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("unary",48, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // minus_opt ::= minus_opt MINUS 
            {
              MinusNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		MinusNode m = (MinusNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = m.addMinus(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("minus_opt",47, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // minus_opt ::= MINUS 
            {
              MinusNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol n = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new MinusNode(n.position(),n.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("minus_opt",47, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // not_opt ::= not_opt NOT 
            {
              NotNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		NotNode n = (NotNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = n.addNot(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("not_opt",46, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // not_opt ::= NOT 
            {
              NotNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol n = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new NotNode(n.position(),n.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("not_opt",46, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // procedure_call ::= IDENTIFIER OPEN_PAREN expression_list CLOSE_PAREN 
            {
              ProcedureCallNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ArrayList<ExpressionNode> args = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new ProcedureCallNode(id.value(),args,id.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("procedure_call",34, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression_list ::= 
            {
              ArrayList<ExpressionNode> RESULT =null;
		 RESULT = new ArrayList<ExpressionNode>(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression_list",35, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression_list ::= expression_list COMMA expression 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ArrayList<ExpressionNode> el = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 el.add(e); e.setParFlag(true);RESULT = el; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression_list",35, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression_list ::= expression 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 ArrayList<ExpressionNode> ar = new ArrayList<ExpressionNode>(); ar.add(e); e.setParFlag(true);RESULT = ar; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("expression_list",35, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // boolean_literal ::= FALSE 
            {
              XiSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol f = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new XiSymbol(Sym.FALSE,"false",f.position().lineStart(),f.position().columnStart(),f.position().columnEnd(),f.position().unit()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("boolean_literal",33, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // boolean_literal ::= TRUE 
            {
              XiSymbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol t = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new XiSymbol(Sym.TRUE,"true",t.position().lineStart(),t.position().columnStart(),t.position().columnEnd(),t.position().unit()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("boolean_literal",33, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // literal ::= boolean_literal 
            {
              SyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new BoolLiteralNode(id.value(),id.position(),id.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // literal ::= STRING_LITERAL 
            {
              SyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new StringLiteralNode(id.value(),id.position(),id.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literal ::= CHAR_LITERAL 
            {
              SyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new CharLiteralNode(id.value(),id.position(),id.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literal ::= INTEGER_LITERAL 
            {
              SyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new IntegerLiteralNode(Long.parseLong(id.value()),id.position(),id.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("literal",32, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // loop_body ::= assignments semicolon_opt 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		AssignmentNode s = (AssignmentNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loop_body",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // loop_body ::= loops 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		WhileNode c = (WhileNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loop_body",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // loop_body ::= matched 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ConditionNode c = (ConditionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loop_body",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // loop_body ::= procedure_call semicolon_opt 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ProcedureCallNode s = (ProcedureCallNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loop_body",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // loop_body ::= declarations semicolon_opt 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		DeclarationNode s = (DeclarationNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loop_body",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // loop_body ::= BREAK semicolon_opt 
            {
              StatementNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol b = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new BreakNode(b.position(),b.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loop_body",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // loop_body ::= OPEN_BRACE statements CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 if(s.position()==null){
		                                                             s.setPosition(o.position());
									   } RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loop_body",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // loop_body ::= OPEN_BRACE statements return_opt CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ReturnNode r = (ReturnNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 s.addReturn(r,r.position(),r.position()); RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loop_body",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // loop_body ::= OPEN_BRACE statements BREAK semicolon_opt CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol b = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s.addStatement(new BreakNode(b.position(),b.position()),o.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loop_body",31, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // loops ::= WHILE expression_paren loop_body 
            {
              WhileNode RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol w = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ExpressionNode args = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		StatementNode b = (StatementNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = new WhileNode(args,b,w.position(),b.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("loops",30, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // conditional_run_matched ::= matched 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ConditionNode s = (ConditionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run_matched",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // conditional_run_matched ::= loops 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		WhileNode s = (WhileNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run_matched",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // conditional_run_matched ::= assignments semicolon_opt 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		AssignmentNode s = (AssignmentNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run_matched",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // conditional_run_matched ::= procedure_call semicolon_opt 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ProcedureCallNode s = (ProcedureCallNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run_matched",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // conditional_run_matched ::= declarations semicolon_opt 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		DeclarationNode s = (DeclarationNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run_matched",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // conditional_run_matched ::= BREAK semicolon_opt 
            {
              StatementNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol b = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new BreakNode(b.position(),b.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run_matched",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // conditional_run_matched ::= OPEN_BRACE statements CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 if(s.position()==null){
		                                                                             s.setPosition(o.position());
									                   } RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run_matched",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conditional_run_matched ::= OPEN_BRACE statements return_opt CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ReturnNode r = (ReturnNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 s.addReturn(r,r.position(),r.position()); RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run_matched",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // conditional_run_matched ::= OPEN_BRACE statements BREAK semicolon_opt CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol b = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s.addStatement(new BreakNode(b.position(),b.position()),o.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run_matched",41, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conditional_run ::= conditionals 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ConditionNode s = (ConditionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conditional_run ::= loops 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		WhileNode s = (WhileNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // conditional_run ::= assignments semicolon_opt 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		AssignmentNode s = (AssignmentNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // conditional_run ::= procedure_call semicolon_opt 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ProcedureCallNode s = (ProcedureCallNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conditional_run ::= declarations semicolon_opt 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		DeclarationNode s = (DeclarationNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditional_run ::= BREAK semicolon_opt 
            {
              StatementNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol b = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = new BreakNode(b.position(),b.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conditional_run ::= OPEN_BRACE statements CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 if(s.position()==null){
		                                                               s.setPosition(o.position());
									     } RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conditional_run ::= OPEN_BRACE statements return_opt CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ReturnNode r = (ReturnNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 s.addReturn(r,r.position(),r.position()); RESULT = s; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // conditional_run ::= OPEN_BRACE statements BREAK semicolon_opt CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol b = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s.addStatement(new BreakNode(b.position(),b.position()),o.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditional_run",29, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // matched ::= IF expression_paren conditional_run_matched ELSE conditional_run_matched 
            {
              ConditionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		StatementNode c = (StatementNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		StatementNode cl = (StatementNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ConditionNode(e,c,cl,e.position(),cl.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("matched",42, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unmatched ::= IF expression_paren conditional_run 
            {
              ConditionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		StatementNode c = (StatementNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ConditionNode(e,c,e.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("unmatched",43, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conditionals ::= unmatched 
            {
              ConditionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ConditionNode m = (ConditionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = m; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditionals",28, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditionals ::= matched 
            {
              ConditionNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ConditionNode m = (ConditionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		RESULT = m; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("conditionals",28, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assign_lhs ::= assign_lhs COMMA array_lookup 
            {
              LHSListNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		LHSListNode a = (LHSListNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayLookUpNode b = (ArrayLookUpNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = a.addLHS(b,a.position(),b.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("assign_lhs",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assign_lhs ::= array_lookup 
            {
              LHSListNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayLookUpNode a = (ArrayLookUpNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new LHSListNode(a,a.position(),a.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("assign_lhs",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assign_lhs ::= assign_lhs COMMA IDENTIFIER 
            {
              LHSListNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		LHSListNode a = (LHSListNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = a.addLHS(id.value(),a.position(),id.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("assign_lhs",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assign_lhs ::= assign_lhs COMMA UNDERSCORE 
            {
              LHSListNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		LHSListNode a = (LHSListNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol u = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = a.addLHS(a.position(),u.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("assign_lhs",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assign_lhs ::= assign_lhs COMMA IDENTIFIER COLON type 
            {
              LHSListNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		LHSListNode a = (LHSListNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = a.addLHS(id.value(),t,a.position(),id.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("assign_lhs",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assign_lhs ::= IDENTIFIER 
            {
              LHSListNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new LHSListNode(id.value(),id.position(),id.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("assign_lhs",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assign_lhs ::= UNDERSCORE 
            {
              LHSListNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol u = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new LHSListNode(u.position(),u.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("assign_lhs",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assign_lhs ::= IDENTIFIER COLON type 
            {
              LHSListNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new LHSListNode(id.value(),t,id.position(),id.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("assign_lhs",26, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // left_hand_side ::= assign_lhs GETS 
            {
              LHSListNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		LHSListNode a = (LHSListNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("left_hand_side",27, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignments ::= left_hand_side expression 
            {
              AssignmentNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		LHSListNode a = (LHSListNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new AssignmentNode(a,e,a.position(),e.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("assignments",25, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // return_opt ::= RETURN expression_list semicolon_opt 
            {
              ReturnNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol r = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ArrayList<ExpressionNode> e = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 if(e.size()==0){
                                                                             RESULT = new ReturnNode(e,r.position(),r.position());
									   }else{
									     RESULT = new ReturnNode(e,e.get(0).position(),e.get(e.size()-1).position());
									   } 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("return_opt",24, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declarations ::= IDENTIFIER COLON type 
            {
              DeclarationNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new DeclarationNode(id.value(),t,id.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("declarations",23, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= OPEN_BRACE RETURN expression_list semicolon_opt CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		XiSymbol r = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ArrayList<ExpressionNode> e = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		 if (e == null) {
			                                                                      RESULT = new ReturnNode(new ArrayList<ExpressionNode>(),r.position(),r.position());
																		     } else{
																			      RESULT = new ReturnNode(e,r.position(),r.position());
																			 }	  
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= OPEN_BRACE statements CLOSE_BRACE 
            {
              StatementNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		StatementsNode c = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol cl = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 StatementsNode sn = new StatementsNode(); 
									   if(c.position()==null){
									     sn.addStatement(c,o.position(),cl.position()); RESULT = sn; 
									   }else{
									     sn.addStatement(c,o.position(),c.position()); RESULT = sn; 
									   }
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= loops 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		WhileNode c = (WhileNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= conditionals 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ConditionNode c = (ConditionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= assignments semicolon_opt 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		AssignmentNode c = (AssignmentNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= procedure_call semicolon_opt 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ProcedureCallNode c = (ProcedureCallNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= declarations semicolon_opt 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		DeclarationNode c = (DeclarationNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statements ::= 
            {
              StatementsNode RESULT =null;
		 RESULT = new StatementsNode(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("statements",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statements ::= statements statement 
            {
              StatementsNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		StatementNode c = (StatementNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = s.addStatement(c,s.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("statements",21, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // non_empty_brackets ::= OPEN_BRACKET expression CLOSE_BRACKET 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 ArrayList<ExpressionNode>  ar = new ArrayList<ExpressionNode>(); 
							   ar.add(e);
							   RESULT = ar; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("non_empty_brackets",19, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // non_empty_brackets ::= non_empty_brackets OPEN_BRACKET expression CLOSE_BRACKET 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		ArrayList<ExpressionNode> b = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 b.add(e); RESULT = b; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("non_empty_brackets",19, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // empty_brackets ::= empty_brackets OPEN_BRACKET CLOSE_BRACKET 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ArrayList<ExpressionNode> eb = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 eb.add(new IntegerLiteralNode(0,o.position(),c.position())); RESULT = eb; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("empty_brackets",20, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // empty_brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol o = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 ArrayList<ExpressionNode> ar = new ArrayList<ExpressionNode>();
                                                     ar.add(new IntegerLiteralNode(0,o.position(),c.position()));
													 RESULT = ar; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("empty_brackets",20, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // brackets ::= empty_brackets 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayList<ExpressionNode> b = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = b; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("brackets",18, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // brackets ::= non_empty_brackets 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayList<ExpressionNode> nb = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = nb; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("brackets",18, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // brackets ::= non_empty_brackets empty_brackets 
            {
              ArrayList<ExpressionNode> RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ArrayList<ExpressionNode> nb = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayList<ExpressionNode> b = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 nb.addAll(b); RESULT = nb; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("brackets",18, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // array ::= primitive_type brackets 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayList<ExpressionNode> b = (ArrayList<ExpressionNode>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 switch (t.type) { 
						case INT: RESULT = new Type(Type.typeEnum.INT_ARRAY,b); break;
						case BOOL: RESULT = new Type(Type.typeEnum.BOOL_ARRAY,b); break;
                        case ABSTRACT: RESULT = new Type(Type.typeEnum.ABSTRACT_ARRAY,b,t.getObject()); break;						
						} 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("array",17, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // primitive_type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new Type(Type.typeEnum.ABSTRACT,id.value()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primitive_type",16, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // primitive_type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type(Type.typeEnum.BOOL); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primitive_type",16, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // primitive_type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type(Type.typeEnum.INT); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("primitive_type",16, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= array 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= primitive_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameter_brackets ::= parameter_brackets OPEN_BRACKET CLOSE_BRACKET 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		 RESULT = b + 1; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("parameter_brackets",50, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameter_brackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("parameter_brackets",50, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameter_type ::= primitive_type parameter_brackets 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 switch (t.type) { 
						case INT: RESULT = new Type(Type.typeEnum.INT_ARRAY,b); break;
						case BOOL: RESULT = new Type(Type.typeEnum.BOOL_ARRAY,b); break; 
						case ABSTRACT: RESULT = new Type(Type.typeEnum.ABSTRACT_ARRAY,b,t.getObject()); break; 
						} 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("parameter_type",49, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter_type ::= primitive_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("parameter_type",49, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_type ::= return_type COMMA parameter_type 
            {
              ArrayList<Type> RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ArrayList<Type> rt = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 rt.add(t); RESULT = rt; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("return_type",14, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // return_type ::= COLON parameter_type 
            {
              ArrayList<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 ArrayList<Type> ar = new ArrayList<Type>(); ar.add(t); RESULT = ar; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("return_type",14, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameters ::= 
            {
              LinkedHashMap<String,Type> RESULT =null;
		 RESULT = new LinkedHashMap<String,Type>(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameters ::= parameters COMMA IDENTIFIER COLON parameter_type 
            {
              LinkedHashMap<String,Type> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 p.put(id.value(),t); RESULT = p; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= IDENTIFIER COLON parameter_type 
            {
              LinkedHashMap<String,Type> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 LinkedHashMap<String,Type> mappi = new LinkedHashMap<String,Type>(); mappi.put(id.value(),t); RESULT = mappi; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters_paren ::= OPEN_PAREN parameters CLOSE_PAREN 
            {
              LinkedHashMap<String,Type> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = p; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("parameters_paren",44, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure ::= IDENTIFIER parameters_paren OPEN_BRACE statements return_opt CLOSE_BRACE 
            {
              FunctionDecNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ReturnNode r = (ReturnNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunctionDecNode(id.value(),p,new ArrayList<Type>(),s,r,id.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("procedure",12, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedure ::= IDENTIFIER parameters_paren OPEN_BRACE statements CLOSE_BRACE 
            {
              FunctionDecNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunctionDecNode(id.value(),p,new ArrayList<Type>(),s,null,id.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("procedure",12, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function ::= IDENTIFIER parameters_paren return_type OPEN_BRACE statements CLOSE_BRACE 
            {
              FunctionDecNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		ArrayList<Type> r = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunctionDecNode(id.value(),p,r,s,null,id.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= IDENTIFIER parameters_paren return_type OPEN_BRACE statements return_opt CLOSE_BRACE 
            {
              FunctionDecNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).right;
		LinkedHashMap<String,Type> p = (LinkedHashMap<String,Type>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		ArrayList<Type> r = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		StatementsNode s = (StatementsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ReturnNode ro = (ReturnNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunctionDecNode(id.value(),p,r,s,ro,id.position(),c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("function",11, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-6)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // functions ::= procedure 
            {
              FunctionsNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionDecNode f = (FunctionDecNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunctionsNode(f,f.position(),f.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("functions",10, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // functions ::= function 
            {
              FunctionsNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionDecNode f = (FunctionDecNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new FunctionsNode(f,f.position(),f.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("functions",10, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // use_opt ::= 
            {
              UseNode RESULT =null;
		 RESULT = new UseNode(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("use_opt",9, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // use_opt ::= use_opt USE IDENTIFIER semicolon_opt 
            {
              UseNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		UseNode u = (UseNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int useTleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int useTright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		XiSymbol useT = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		 RESULT = u.addUse(id.value(),u.position(),useT.position(),id.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("use_opt",9, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // field ::= identifiers COLON type 
            {
              DeclarationNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ArrayList<String> id = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new DeclarationNode(id,t,c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("field",4, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_body ::= functions 
            {
              ClassBodyNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionsNode f = (FunctionsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 ClassBodyNode cb = new ClassBodyNode(); cb.add(f); RESULT = cb; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("class_body",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_body ::= field 
            {
              ClassBodyNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		DeclarationNode f = (DeclarationNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 ClassBodyNode cb = new ClassBodyNode(); cb.add(f); RESULT = cb; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("class_body",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_body ::= class_body field 
            {
              ClassBodyNode RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ClassBodyNode cb = (ClassBodyNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		DeclarationNode f = (DeclarationNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 cb.add(f); RESULT = cb; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("class_body",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // class_body ::= class_body functions 
            {
              ClassBodyNode RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ClassBodyNode cb = (ClassBodyNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionsNode f = (FunctionsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 cb.add(f); RESULT = cb; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("class_body",2, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifiers ::= IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 ArrayList<String> i = new ArrayList<String>(); i.add(id.value()); RESULT = i; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("identifiers",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifiers ::= identifiers COMMA IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).right;
		ArrayList<String> i = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol id = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 i.add(id.value()); RESULT = i; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("identifiers",5, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-2)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // extends_opt ::= 
            {
              ExtendsNode RESULT =null;
		 RESULT = new ExtendsNode(); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("extends_opt",3, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // extends_opt ::= EXTENDS identifiers 
            {
              ExtendsNode RESULT =null;
		int extleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		XiSymbol ext = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ArrayList<String> d = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ExtendsNode(d,ext.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("extends_opt",3, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class ::= CLASS IDENTIFIER extends_opt OPEN_BRACE class_body CLOSE_BRACE 
            {
              ClassNode RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).right;
		XiSymbol cl = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).right;
		XiSymbol name = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-4)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).right;
		ExtendsNode ext = (ExtendsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		ClassBodyNode b = (ClassBodyNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		XiSymbol c = (XiSymbol)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new ClassNode(name.value(), ext,b, cl.position(), c.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("class",1, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-5)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= class 
            {
              BodyNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ClassNode c = (ClassNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new BodyNode(c); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= functions 
            {
              BodyNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionsNode f = (FunctionsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new BodyNode(f); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= field 
            {
              BodyNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		DeclarationNode f = (DeclarationNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new BodyNode(f); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= body field 
            {
              BodyNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		BodyNode cf = (BodyNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		DeclarationNode f = (DeclarationNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 cf.add(f); RESULT = cf; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= body class 
            {
              BodyNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		BodyNode cf = (BodyNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		ClassNode c = (ClassNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 cf.add(c); RESULT = cf; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= body functions 
            {
              BodyNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		BodyNode cf = (BodyNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		FunctionsNode f = (FunctionsNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 cf.add(f); RESULT = cf; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("body",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compilation_unit ::= use_opt body 
            {
              CompUnitNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		UseNode u = (UseNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		BodyNode fs = (BodyNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = new CompUnitNode(u,fs,u.position(),fs.position()); 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("compilation_unit",8, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= compilation_unit 
            {
              CompUnitNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()).right;
		CompUnitNode c = (CompUnitNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("goal",7, ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          return CUP$CupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).right;
		CompUnitNode start_val = (CompUnitNode)((java_cup.runtime.Symbol) CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)).value;
		RESULT = start_val;
              CUP$CupParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CupParser$stack.elementAt(CUP$CupParser$top-1)), ((java_cup.runtime.Symbol)CUP$CupParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CupParser$parser.done_parsing();
          return CUP$CupParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

